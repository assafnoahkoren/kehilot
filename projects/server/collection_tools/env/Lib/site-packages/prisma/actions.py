# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE id = ?',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE email = ?',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'email': 'ggciceaie',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'email': 'bbehjachib',
                },
                {
                    # data to create a User record
                    'email': 'cadfabfehe',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 'dgiiaaijj',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 'bfaiacjjfc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'id': 'eigcfgbif',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the picture_url field
        users = await User.prisma().find_many(
            take=5,
            order={
                'picture_url': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the first_name field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'first_name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the last_name field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'last_name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 'bagcfbhiig',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 'cghideieh',
            },
            data={
                'create': {
                    'id': 'cghideieh',
                    'email': 'cadfabfehe',
                },
                'update': {
                    'email': 'cadfabfehe',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'phone': 'biabhbdai'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'password': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by updated_at values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['updated_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AuthChallengeActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.AuthChallenge]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await AuthChallenge.prisma().query_raw(
            'SELECT * FROM AuthChallenge WHERE id = ?',
            'idghgaicb',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.AuthChallenge
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await AuthChallenge.prisma().query_first(
            'SELECT * FROM AuthChallenge WHERE user_id = ?',
            'fjfddhigg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.AuthChallengeCreateInput,
        include: Optional[types.AuthChallengeInclude] = None
    ) -> _PrismaModelT:
        """Create a new AuthChallenge record.

        Parameters
        ----------
        data
            AuthChallenge record data
        include
            Specifies which relations should be loaded on the returned AuthChallenge model

        Returns
        -------
        prisma.models.AuthChallenge
            The created AuthChallenge record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a AuthChallenge record from just the required fields
        authchallenge = await AuthChallenge.prisma().create(
            data={
                # data to create a AuthChallenge record
                'user_id': 'hjaecfifb',
                'code': 'cbbbjbfcii',
                'expired_at': datetime.datetime.utcnow(),
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.AuthChallengeCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple AuthChallenge records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of AuthChallenge record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await AuthChallenge.prisma().create_many(
            data=[
                {
                    # data to create a AuthChallenge record
                    'user_id': 'bbejhfidcb',
                    'code': 'bgeecijdgg',
                    'expired_at': datetime.datetime.utcnow(),
                },
                {
                    # data to create a AuthChallenge record
                    'user_id': 'bdiicjafbj',
                    'code': 'bgehebiafc',
                    'expired_at': datetime.datetime.utcnow(),
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.AuthChallengeWhereUniqueInput,
        include: Optional[types.AuthChallengeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single AuthChallenge record.

        Parameters
        ----------
        where
            AuthChallenge filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned AuthChallenge model

        Returns
        -------
        prisma.models.AuthChallenge
            The deleted AuthChallenge record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        authchallenge = await AuthChallenge.prisma().delete(
            where={
                'id': 'bghffegacj',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.AuthChallengeWhereUniqueInput,
        include: Optional[types.AuthChallengeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique AuthChallenge record.

        Parameters
        ----------
        where
            AuthChallenge filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned AuthChallenge model

        Returns
        -------
        prisma.models.AuthChallenge
            The found AuthChallenge record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        authchallenge = await AuthChallenge.prisma().find_unique(
            where={
                'id': 'bhghchehcc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.AuthChallengeWhereUniqueInput,
        include: Optional[types.AuthChallengeInclude] = None
    ) -> _PrismaModelT:
        """Find a unique AuthChallenge record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            AuthChallenge filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned AuthChallenge model

        Returns
        -------
        prisma.models.AuthChallenge
            The found AuthChallenge record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        authchallenge = await AuthChallenge.prisma().find_unique_or_raise(
            where={
                'id': 'dcgchcbbf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AuthChallengeWhereInput] = None,
        cursor: Optional[types.AuthChallengeWhereUniqueInput] = None,
        include: Optional[types.AuthChallengeInclude] = None,
        order: Optional[Union[types.AuthChallengeOrderByInput, List[types.AuthChallengeOrderByInput]]] = None,
        distinct: Optional[List[types.AuthChallengeScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple AuthChallenge records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of AuthChallenge records returned
        skip
            Ignore the first N results
        where
            AuthChallenge filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AuthChallenge model
        order
            Order the returned AuthChallenge records by any field
        distinct
            Filter AuthChallenge records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.AuthChallenge]
            The list of all AuthChallenge records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 AuthChallenge records
        authchallenges = await AuthChallenge.prisma().find_many(take=10)

        # find the first 5 AuthChallenge records ordered by the code field
        authchallenges = await AuthChallenge.prisma().find_many(
            take=5,
            order={
                'code': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AuthChallengeWhereInput] = None,
        cursor: Optional[types.AuthChallengeWhereUniqueInput] = None,
        include: Optional[types.AuthChallengeInclude] = None,
        order: Optional[Union[types.AuthChallengeOrderByInput, List[types.AuthChallengeOrderByInput]]] = None,
        distinct: Optional[List[types.AuthChallengeScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single AuthChallenge record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            AuthChallenge filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AuthChallenge model
        order
            Order the returned AuthChallenge records by any field
        distinct
            Filter AuthChallenge records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.AuthChallenge
            The first AuthChallenge record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second AuthChallenge record ordered by the expired_at field
        authchallenge = await AuthChallenge.prisma().find_first(
            skip=1,
            order={
                'expired_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AuthChallengeWhereInput] = None,
        cursor: Optional[types.AuthChallengeWhereUniqueInput] = None,
        include: Optional[types.AuthChallengeInclude] = None,
        order: Optional[Union[types.AuthChallengeOrderByInput, List[types.AuthChallengeOrderByInput]]] = None,
        distinct: Optional[List[types.AuthChallengeScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single AuthChallenge record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            AuthChallenge filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned AuthChallenge model
        order
            Order the returned AuthChallenge records by any field
        distinct
            Filter AuthChallenge records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.AuthChallenge
            The first AuthChallenge record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second AuthChallenge record ordered by the created_at field
        authchallenge = await AuthChallenge.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.AuthChallengeUpdateInput,
        where: types.AuthChallengeWhereUniqueInput,
        include: Optional[types.AuthChallengeInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single AuthChallenge record.

        Parameters
        ----------
        data
            AuthChallenge record data specifying what to update
        where
            AuthChallenge filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned AuthChallenge model

        Returns
        -------
        prisma.models.AuthChallenge
            The updated AuthChallenge record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        authchallenge = await AuthChallenge.prisma().update(
            where={
                'id': 'bdedcabahc',
            },
            data={
                # data to update the AuthChallenge record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.AuthChallengeWhereUniqueInput,
        data: types.AuthChallengeUpsertInput,
        include: Optional[types.AuthChallengeInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            AuthChallenge filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned AuthChallenge model

        Returns
        -------
        prisma.models.AuthChallenge
            The created or updated AuthChallenge record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        authchallenge = await AuthChallenge.prisma().upsert(
            where={
                'id': 'ghfhiafcb',
            },
            data={
                'create': {
                    'id': 'ghfhiafcb',
                    'user_id': 'bdiicjafbj',
                    'code': 'bgehebiafc',
                    'expired_at': datetime.datetime.utcnow(),
                },
                'update': {
                    'user_id': 'bdiicjafbj',
                    'code': 'bgehebiafc',
                    'expired_at': datetime.datetime.utcnow(),
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.AuthChallengeUpdateManyMutationInput,
        where: types.AuthChallengeWhereInput,
    ) -> int:
        """Update multiple AuthChallenge records

        Parameters
        ----------
        data
            AuthChallenge data to update the selected AuthChallenge records to
        where
            Filter to select the AuthChallenge records to update

        Returns
        -------
        int
            The total number of AuthChallenge records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all AuthChallenge records
        total = await AuthChallenge.prisma().update_many(
            data={
                'updated_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AuthChallengeWhereInput] = None,
        cursor: Optional[types.AuthChallengeWhereUniqueInput] = None,
    ) -> int:
        """Count the number of AuthChallenge records present in the database

        Parameters
        ----------
        select
            Select the AuthChallenge fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            AuthChallenge filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AuthChallengeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await AuthChallenge.prisma().count()

        # results: prisma.types.AuthChallengeCountAggregateOutput
        results = await AuthChallenge.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.AuthChallengeCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AuthChallengeWhereInput] = None,
        cursor: Optional[types.AuthChallengeWhereUniqueInput] = None,
    ) -> types.AuthChallengeCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.AuthChallengeCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AuthChallengeWhereInput] = None,
        cursor: Optional[types.AuthChallengeWhereUniqueInput] = None,
    ) -> Union[int, types.AuthChallengeCountAggregateOutput]:
        """Count the number of AuthChallenge records present in the database

        Parameters
        ----------
        select
            Select the AuthChallenge fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            AuthChallenge filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AuthChallengeCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await AuthChallenge.prisma().count()

        # results: prisma.types.AuthChallengeCountAggregateOutput
        results = await AuthChallenge.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AuthChallengeCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.AuthChallengeWhereInput] = None
    ) -> int:
        """Delete multiple AuthChallenge records.

        Parameters
        ----------
        where
            Optional AuthChallenge filter to find the records to be deleted

        Returns
        -------
        int
            The total number of AuthChallenge records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all AuthChallenge records
        total = await AuthChallenge.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.AuthChallengeScalarFieldKeys'],
        *,
        where: Optional['types.AuthChallengeWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AuthChallengeAvgAggregateInput'] = None,
        sum: Optional['types.AuthChallengeSumAggregateInput'] = None,
        min: Optional['types.AuthChallengeMinAggregateInput'] = None,
        max: Optional['types.AuthChallengeMaxAggregateInput'] = None,
        having: Optional['types.AuthChallengeScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AuthChallengeCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AuthChallengeScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AuthChallengeScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AuthChallengeGroupByOutput']:
        """Group AuthChallenge records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar AuthChallenge fields to group records by
        where
            AuthChallenge filter to select records
        take
            Limit the maximum number of AuthChallenge records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AuthChallengeGroupByOutput]
            A list of dictionaries representing the AuthChallenge record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group AuthChallenge records by code values
        # and count how many records are in each group
        results = await AuthChallenge.prisma().group_by(
            ['code'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class SubjectActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Subject]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Subject.prisma().query_raw(
            'SELECT * FROM Subject WHERE id = ?',
            'heejgedji',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Subject
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Subject.prisma().query_first(
            'SELECT * FROM Subject WHERE gov_id = ?',
            'bjgjgibgbf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.SubjectCreateInput,
        include: Optional[types.SubjectInclude] = None
    ) -> _PrismaModelT:
        """Create a new Subject record.

        Parameters
        ----------
        data
            Subject record data
        include
            Specifies which relations should be loaded on the returned Subject model

        Returns
        -------
        prisma.models.Subject
            The created Subject record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Subject record from just the required fields
        subject = await Subject.prisma().create(
            data={
                # data to create a Subject record
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.SubjectCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Subject records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Subject record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Subject.prisma().create_many(
            data=[
                {
                    # data to create a Subject record
                },
                {
                    # data to create a Subject record
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.SubjectWhereUniqueInput,
        include: Optional[types.SubjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Subject record.

        Parameters
        ----------
        where
            Subject filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Subject model

        Returns
        -------
        prisma.models.Subject
            The deleted Subject record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        subject = await Subject.prisma().delete(
            where={
                'id': 'bbbgbhfjge',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.SubjectWhereUniqueInput,
        include: Optional[types.SubjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Subject record.

        Parameters
        ----------
        where
            Subject filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Subject model

        Returns
        -------
        prisma.models.Subject
            The found Subject record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        subject = await Subject.prisma().find_unique(
            where={
                'id': 'igbehcbab',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.SubjectWhereUniqueInput,
        include: Optional[types.SubjectInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Subject record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Subject filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Subject model

        Returns
        -------
        prisma.models.Subject
            The found Subject record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        subject = await Subject.prisma().find_unique_or_raise(
            where={
                'id': 'bdadaadhag',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SubjectWhereInput] = None,
        cursor: Optional[types.SubjectWhereUniqueInput] = None,
        include: Optional[types.SubjectInclude] = None,
        order: Optional[Union[types.SubjectOrderByInput, List[types.SubjectOrderByInput]]] = None,
        distinct: Optional[List[types.SubjectScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Subject records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Subject records returned
        skip
            Ignore the first N results
        where
            Subject filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Subject model
        order
            Order the returned Subject records by any field
        distinct
            Filter Subject records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Subject]
            The list of all Subject records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Subject records
        subjects = await Subject.prisma().find_many(take=10)

        # find the first 5 Subject records ordered by the phone field
        subjects = await Subject.prisma().find_many(
            take=5,
            order={
                'phone': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SubjectWhereInput] = None,
        cursor: Optional[types.SubjectWhereUniqueInput] = None,
        include: Optional[types.SubjectInclude] = None,
        order: Optional[Union[types.SubjectOrderByInput, List[types.SubjectOrderByInput]]] = None,
        distinct: Optional[List[types.SubjectScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Subject record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Subject filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Subject model
        order
            Order the returned Subject records by any field
        distinct
            Filter Subject records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Subject
            The first Subject record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Subject record ordered by the first_name field
        subject = await Subject.prisma().find_first(
            skip=1,
            order={
                'first_name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.SubjectWhereInput] = None,
        cursor: Optional[types.SubjectWhereUniqueInput] = None,
        include: Optional[types.SubjectInclude] = None,
        order: Optional[Union[types.SubjectOrderByInput, List[types.SubjectOrderByInput]]] = None,
        distinct: Optional[List[types.SubjectScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Subject record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Subject filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Subject model
        order
            Order the returned Subject records by any field
        distinct
            Filter Subject records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Subject
            The first Subject record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Subject record ordered by the middle_name field
        subject = await Subject.prisma().find_first_or_raise(
            skip=1,
            order={
                'middle_name': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.SubjectUpdateInput,
        where: types.SubjectWhereUniqueInput,
        include: Optional[types.SubjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Subject record.

        Parameters
        ----------
        data
            Subject record data specifying what to update
        where
            Subject filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Subject model

        Returns
        -------
        prisma.models.Subject
            The updated Subject record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        subject = await Subject.prisma().update(
            where={
                'id': 'bgiggdidbf',
            },
            data={
                # data to update the Subject record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.SubjectWhereUniqueInput,
        data: types.SubjectUpsertInput,
        include: Optional[types.SubjectInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Subject filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Subject model

        Returns
        -------
        prisma.models.Subject
            The created or updated Subject record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        subject = await Subject.prisma().upsert(
            where={
                'id': 'caaaedabfc',
            },
            data={
                'create': {
                    'id': 'caaaedabfc',
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.SubjectUpdateManyMutationInput,
        where: types.SubjectWhereInput,
    ) -> int:
        """Update multiple Subject records

        Parameters
        ----------
        data
            Subject data to update the selected Subject records to
        where
            Filter to select the Subject records to update

        Returns
        -------
        int
            The total number of Subject records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Subject records
        total = await Subject.prisma().update_many(
            data={
                'last_name': 'bigibebcib'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SubjectWhereInput] = None,
        cursor: Optional[types.SubjectWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Subject records present in the database

        Parameters
        ----------
        select
            Select the Subject fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Subject filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SubjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Subject.prisma().count()

        # results: prisma.types.SubjectCountAggregateOutput
        results = await Subject.prisma().count(
            select={
                '_all': True,
                'date_of_birth': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.SubjectCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SubjectWhereInput] = None,
        cursor: Optional[types.SubjectWhereUniqueInput] = None,
    ) -> types.SubjectCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.SubjectCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.SubjectWhereInput] = None,
        cursor: Optional[types.SubjectWhereUniqueInput] = None,
    ) -> Union[int, types.SubjectCountAggregateOutput]:
        """Count the number of Subject records present in the database

        Parameters
        ----------
        select
            Select the Subject fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Subject filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.SubjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Subject.prisma().count()

        # results: prisma.types.SubjectCountAggregateOutput
        results = await Subject.prisma().count(
            select={
                '_all': True,
                'mother_name': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.SubjectCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.SubjectWhereInput] = None
    ) -> int:
        """Delete multiple Subject records.

        Parameters
        ----------
        where
            Optional Subject filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Subject records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Subject records
        total = await Subject.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.SubjectScalarFieldKeys'],
        *,
        where: Optional['types.SubjectWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.SubjectAvgAggregateInput'] = None,
        sum: Optional['types.SubjectSumAggregateInput'] = None,
        min: Optional['types.SubjectMinAggregateInput'] = None,
        max: Optional['types.SubjectMaxAggregateInput'] = None,
        having: Optional['types.SubjectScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.SubjectCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.SubjectScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.SubjectScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.SubjectGroupByOutput']:
        """Group Subject records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Subject fields to group records by
        where
            Subject filter to select records
        take
            Limit the maximum number of Subject records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.SubjectGroupByOutput]
            A list of dictionaries representing the Subject record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Subject records by father_name values
        # and count how many records are in each group
        results = await Subject.prisma().group_by(
            ['father_name'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class GroupActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Group]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Group.prisma().query_raw(
            'SELECT * FROM Group WHERE id = ?',
            'bigaiehgcc',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Group
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Group.prisma().query_first(
            'SELECT * FROM Group WHERE name = ?',
            'beeifcbebf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.GroupCreateInput,
        include: Optional[types.GroupInclude] = None
    ) -> _PrismaModelT:
        """Create a new Group record.

        Parameters
        ----------
        data
            Group record data
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The created Group record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Group record from just the required fields
        group = await Group.prisma().create(
            data={
                # data to create a Group record
                'name': 'bgcigfahea',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.GroupCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Group records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Group record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Group.prisma().create_many(
            data=[
                {
                    # data to create a Group record
                    'name': 'bcejgaggif',
                },
                {
                    # data to create a Group record
                    'name': 'idfjadbcc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.GroupWhereUniqueInput,
        include: Optional[types.GroupInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Group record.

        Parameters
        ----------
        where
            Group filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The deleted Group record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        group = await Group.prisma().delete(
            where={
                'id': 'hgdhbjhhj',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.GroupWhereUniqueInput,
        include: Optional[types.GroupInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Group record.

        Parameters
        ----------
        where
            Group filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The found Group record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        group = await Group.prisma().find_unique(
            where={
                'id': 'ecjjjfbae',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.GroupWhereUniqueInput,
        include: Optional[types.GroupInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Group record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Group filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The found Group record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        group = await Group.prisma().find_unique_or_raise(
            where={
                'id': 'bhhfibbigf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
        include: Optional[types.GroupInclude] = None,
        order: Optional[Union[types.GroupOrderByInput, List[types.GroupOrderByInput]]] = None,
        distinct: Optional[List[types.GroupScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Group records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Group records returned
        skip
            Ignore the first N results
        where
            Group filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Group model
        order
            Order the returned Group records by any field
        distinct
            Filter Group records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Group]
            The list of all Group records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Group records
        groups = await Group.prisma().find_many(take=10)

        # find the first 5 Group records ordered by the sql_where field
        groups = await Group.prisma().find_many(
            take=5,
            order={
                'sql_where': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
        include: Optional[types.GroupInclude] = None,
        order: Optional[Union[types.GroupOrderByInput, List[types.GroupOrderByInput]]] = None,
        distinct: Optional[List[types.GroupScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Group record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Group filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Group model
        order
            Order the returned Group records by any field
        distinct
            Filter Group records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Group
            The first Group record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Group record ordered by the created_at field
        group = await Group.prisma().find_first(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
        include: Optional[types.GroupInclude] = None,
        order: Optional[Union[types.GroupOrderByInput, List[types.GroupOrderByInput]]] = None,
        distinct: Optional[List[types.GroupScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Group record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Group filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Group model
        order
            Order the returned Group records by any field
        distinct
            Filter Group records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Group
            The first Group record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Group record ordered by the updated_at field
        group = await Group.prisma().find_first_or_raise(
            skip=1,
            order={
                'updated_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.GroupUpdateInput,
        where: types.GroupWhereUniqueInput,
        include: Optional[types.GroupInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Group record.

        Parameters
        ----------
        data
            Group record data specifying what to update
        where
            Group filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The updated Group record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        group = await Group.prisma().update(
            where={
                'id': 'ijdbeffgg',
            },
            data={
                # data to update the Group record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.GroupWhereUniqueInput,
        data: types.GroupUpsertInput,
        include: Optional[types.GroupInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Group filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Group model

        Returns
        -------
        prisma.models.Group
            The created or updated Group record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        group = await Group.prisma().upsert(
            where={
                'id': 'jjfeafhfj',
            },
            data={
                'create': {
                    'id': 'jjfeafhfj',
                    'name': 'idfjadbcc',
                },
                'update': {
                    'name': 'idfjadbcc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.GroupUpdateManyMutationInput,
        where: types.GroupWhereInput,
    ) -> int:
        """Update multiple Group records

        Parameters
        ----------
        data
            Group data to update the selected Group records to
        where
            Filter to select the Group records to update

        Returns
        -------
        int
            The total number of Group records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Group records
        total = await Group.prisma().update_many(
            data={
                'id': 'cbachdgfce'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Group records present in the database

        Parameters
        ----------
        select
            Select the Group fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Group filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GroupCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Group.prisma().count()

        # results: prisma.types.GroupCountAggregateOutput
        results = await Group.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.GroupCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
    ) -> types.GroupCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.GroupCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupWhereInput] = None,
        cursor: Optional[types.GroupWhereUniqueInput] = None,
    ) -> Union[int, types.GroupCountAggregateOutput]:
        """Count the number of Group records present in the database

        Parameters
        ----------
        select
            Select the Group fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Group filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GroupCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Group.prisma().count()

        # results: prisma.types.GroupCountAggregateOutput
        results = await Group.prisma().count(
            select={
                '_all': True,
                'sql_where': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.GroupCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.GroupWhereInput] = None
    ) -> int:
        """Delete multiple Group records.

        Parameters
        ----------
        where
            Optional Group filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Group records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Group records
        total = await Group.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.GroupScalarFieldKeys'],
        *,
        where: Optional['types.GroupWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.GroupAvgAggregateInput'] = None,
        sum: Optional['types.GroupSumAggregateInput'] = None,
        min: Optional['types.GroupMinAggregateInput'] = None,
        max: Optional['types.GroupMaxAggregateInput'] = None,
        having: Optional['types.GroupScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.GroupCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.GroupScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.GroupScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.GroupGroupByOutput']:
        """Group Group records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Group fields to group records by
        where
            Group filter to select records
        take
            Limit the maximum number of Group records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.GroupGroupByOutput]
            A list of dictionaries representing the Group record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Group records by created_at values
        # and count how many records are in each group
        results = await Group.prisma().group_by(
            ['created_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class GroupUserRoleActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.GroupUserRole]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await GroupUserRole.prisma().query_raw(
            'SELECT * FROM GroupUserRole WHERE id = ?',
            'chbfcacbd',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.GroupUserRole
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await GroupUserRole.prisma().query_first(
            'SELECT * FROM GroupUserRole WHERE group_id = ?',
            'efggddide',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.GroupUserRoleCreateInput,
        include: Optional[types.GroupUserRoleInclude] = None
    ) -> _PrismaModelT:
        """Create a new GroupUserRole record.

        Parameters
        ----------
        data
            GroupUserRole record data
        include
            Specifies which relations should be loaded on the returned GroupUserRole model

        Returns
        -------
        prisma.models.GroupUserRole
            The created GroupUserRole record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a GroupUserRole record from just the required fields
        groupuserrole = await GroupUserRole.prisma().create(
            data={
                # data to create a GroupUserRole record
                'group_id': 'caficfigfb',
                'user_id': 'bfidgijfjc',
                'role': 'ihieecagf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.GroupUserRoleCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple GroupUserRole records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of GroupUserRole record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await GroupUserRole.prisma().create_many(
            data=[
                {
                    # data to create a GroupUserRole record
                    'group_id': 'bghfciaafe',
                    'user_id': 'bgchfhgceh',
                    'role': 'cafeiaccbc',
                },
                {
                    # data to create a GroupUserRole record
                    'group_id': 'gaddfhfh',
                    'user_id': 'gieegcbeg',
                    'role': 'bgcffadich',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.GroupUserRoleWhereUniqueInput,
        include: Optional[types.GroupUserRoleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single GroupUserRole record.

        Parameters
        ----------
        where
            GroupUserRole filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned GroupUserRole model

        Returns
        -------
        prisma.models.GroupUserRole
            The deleted GroupUserRole record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        groupuserrole = await GroupUserRole.prisma().delete(
            where={
                'id': 'fcbichhci',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.GroupUserRoleWhereUniqueInput,
        include: Optional[types.GroupUserRoleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique GroupUserRole record.

        Parameters
        ----------
        where
            GroupUserRole filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GroupUserRole model

        Returns
        -------
        prisma.models.GroupUserRole
            The found GroupUserRole record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        groupuserrole = await GroupUserRole.prisma().find_unique(
            where={
                'id': 'bcggadccgf',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.GroupUserRoleWhereUniqueInput,
        include: Optional[types.GroupUserRoleInclude] = None
    ) -> _PrismaModelT:
        """Find a unique GroupUserRole record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            GroupUserRole filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GroupUserRole model

        Returns
        -------
        prisma.models.GroupUserRole
            The found GroupUserRole record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        groupuserrole = await GroupUserRole.prisma().find_unique_or_raise(
            where={
                'id': 'jdcfdcgc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupUserRoleWhereInput] = None,
        cursor: Optional[types.GroupUserRoleWhereUniqueInput] = None,
        include: Optional[types.GroupUserRoleInclude] = None,
        order: Optional[Union[types.GroupUserRoleOrderByInput, List[types.GroupUserRoleOrderByInput]]] = None,
        distinct: Optional[List[types.GroupUserRoleScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple GroupUserRole records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of GroupUserRole records returned
        skip
            Ignore the first N results
        where
            GroupUserRole filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GroupUserRole model
        order
            Order the returned GroupUserRole records by any field
        distinct
            Filter GroupUserRole records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.GroupUserRole]
            The list of all GroupUserRole records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 GroupUserRole records
        groupuserroles = await GroupUserRole.prisma().find_many(take=10)

        # find the first 5 GroupUserRole records ordered by the user_id field
        groupuserroles = await GroupUserRole.prisma().find_many(
            take=5,
            order={
                'user_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GroupUserRoleWhereInput] = None,
        cursor: Optional[types.GroupUserRoleWhereUniqueInput] = None,
        include: Optional[types.GroupUserRoleInclude] = None,
        order: Optional[Union[types.GroupUserRoleOrderByInput, List[types.GroupUserRoleOrderByInput]]] = None,
        distinct: Optional[List[types.GroupUserRoleScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single GroupUserRole record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GroupUserRole filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GroupUserRole model
        order
            Order the returned GroupUserRole records by any field
        distinct
            Filter GroupUserRole records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GroupUserRole
            The first GroupUserRole record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GroupUserRole record ordered by the role field
        groupuserrole = await GroupUserRole.prisma().find_first(
            skip=1,
            order={
                'role': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GroupUserRoleWhereInput] = None,
        cursor: Optional[types.GroupUserRoleWhereUniqueInput] = None,
        include: Optional[types.GroupUserRoleInclude] = None,
        order: Optional[Union[types.GroupUserRoleOrderByInput, List[types.GroupUserRoleOrderByInput]]] = None,
        distinct: Optional[List[types.GroupUserRoleScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single GroupUserRole record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GroupUserRole filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GroupUserRole model
        order
            Order the returned GroupUserRole records by any field
        distinct
            Filter GroupUserRole records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GroupUserRole
            The first GroupUserRole record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GroupUserRole record ordered by the created_at field
        groupuserrole = await GroupUserRole.prisma().find_first_or_raise(
            skip=1,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.GroupUserRoleUpdateInput,
        where: types.GroupUserRoleWhereUniqueInput,
        include: Optional[types.GroupUserRoleInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single GroupUserRole record.

        Parameters
        ----------
        data
            GroupUserRole record data specifying what to update
        where
            GroupUserRole filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned GroupUserRole model

        Returns
        -------
        prisma.models.GroupUserRole
            The updated GroupUserRole record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        groupuserrole = await GroupUserRole.prisma().update(
            where={
                'id': 'cafdaehjid',
            },
            data={
                # data to update the GroupUserRole record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.GroupUserRoleWhereUniqueInput,
        data: types.GroupUserRoleUpsertInput,
        include: Optional[types.GroupUserRoleInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            GroupUserRole filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned GroupUserRole model

        Returns
        -------
        prisma.models.GroupUserRole
            The created or updated GroupUserRole record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        groupuserrole = await GroupUserRole.prisma().upsert(
            where={
                'id': 'gifdddbia',
            },
            data={
                'create': {
                    'id': 'gifdddbia',
                    'group_id': 'gaddfhfh',
                    'user_id': 'gieegcbeg',
                    'role': 'bgcffadich',
                },
                'update': {
                    'group_id': 'gaddfhfh',
                    'user_id': 'gieegcbeg',
                    'role': 'bgcffadich',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.GroupUserRoleUpdateManyMutationInput,
        where: types.GroupUserRoleWhereInput,
    ) -> int:
        """Update multiple GroupUserRole records

        Parameters
        ----------
        data
            GroupUserRole data to update the selected GroupUserRole records to
        where
            Filter to select the GroupUserRole records to update

        Returns
        -------
        int
            The total number of GroupUserRole records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all GroupUserRole records
        total = await GroupUserRole.prisma().update_many(
            data={
                'updated_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupUserRoleWhereInput] = None,
        cursor: Optional[types.GroupUserRoleWhereUniqueInput] = None,
    ) -> int:
        """Count the number of GroupUserRole records present in the database

        Parameters
        ----------
        select
            Select the GroupUserRole fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GroupUserRole filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GroupUserRoleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GroupUserRole.prisma().count()

        # results: prisma.types.GroupUserRoleCountAggregateOutput
        results = await GroupUserRole.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.GroupUserRoleCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupUserRoleWhereInput] = None,
        cursor: Optional[types.GroupUserRoleWhereUniqueInput] = None,
    ) -> types.GroupUserRoleCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.GroupUserRoleCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GroupUserRoleWhereInput] = None,
        cursor: Optional[types.GroupUserRoleWhereUniqueInput] = None,
    ) -> Union[int, types.GroupUserRoleCountAggregateOutput]:
        """Count the number of GroupUserRole records present in the database

        Parameters
        ----------
        select
            Select the GroupUserRole fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GroupUserRole filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GroupUserRoleCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GroupUserRole.prisma().count()

        # results: prisma.types.GroupUserRoleCountAggregateOutput
        results = await GroupUserRole.prisma().count(
            select={
                '_all': True,
                'group_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.GroupUserRoleCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.GroupUserRoleWhereInput] = None
    ) -> int:
        """Delete multiple GroupUserRole records.

        Parameters
        ----------
        where
            Optional GroupUserRole filter to find the records to be deleted

        Returns
        -------
        int
            The total number of GroupUserRole records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all GroupUserRole records
        total = await GroupUserRole.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.GroupUserRoleScalarFieldKeys'],
        *,
        where: Optional['types.GroupUserRoleWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.GroupUserRoleAvgAggregateInput'] = None,
        sum: Optional['types.GroupUserRoleSumAggregateInput'] = None,
        min: Optional['types.GroupUserRoleMinAggregateInput'] = None,
        max: Optional['types.GroupUserRoleMaxAggregateInput'] = None,
        having: Optional['types.GroupUserRoleScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.GroupUserRoleCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.GroupUserRoleScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.GroupUserRoleScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.GroupUserRoleGroupByOutput']:
        """Group GroupUserRole records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar GroupUserRole fields to group records by
        where
            GroupUserRole filter to select records
        take
            Limit the maximum number of GroupUserRole records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.GroupUserRoleGroupByOutput]
            A list of dictionaries representing the GroupUserRole record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group GroupUserRole records by user_id values
        # and count how many records are in each group
        results = await GroupUserRole.prisma().group_by(
            ['user_id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class NoteActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Note]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Note.prisma().query_raw(
            'SELECT * FROM Note WHERE id = ?',
            'bchehecef',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Note
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Note.prisma().query_first(
            'SELECT * FROM Note WHERE user_id = ?',
            'jeijcbhfe',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.NoteCreateInput,
        include: Optional[types.NoteInclude] = None
    ) -> _PrismaModelT:
        """Create a new Note record.

        Parameters
        ----------
        data
            Note record data
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The created Note record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Note record from just the required fields
        note = await Note.prisma().create(
            data={
                # data to create a Note record
                'user_id': 'bjgejjabff',
                'entity_id': 'bcciijbibg',
                'entity_type': 'cffcachfd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.NoteCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Note records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Note record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Note.prisma().create_many(
            data=[
                {
                    # data to create a Note record
                    'user_id': 'bccdfhdigc',
                    'entity_id': 'febcgjbfj',
                    'entity_type': 'bageiegghg',
                },
                {
                    # data to create a Note record
                    'user_id': 'faidicegb',
                    'entity_id': 'bacecgfhbe',
                    'entity_type': 'ihcahiead',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Note record.

        Parameters
        ----------
        where
            Note filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The deleted Note record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().delete(
            where={
                'id': 'biheheiajg',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Note record.

        Parameters
        ----------
        where
            Note filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The found Note record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().find_unique(
            where={
                'id': 'jbgijghgb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Note record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Note filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The found Note record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().find_unique_or_raise(
            where={
                'id': 'hgjcghfbi',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
        include: Optional[types.NoteInclude] = None,
        order: Optional[Union[types.NoteOrderByInput, List[types.NoteOrderByInput]]] = None,
        distinct: Optional[List[types.NoteScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Note records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Note records returned
        skip
            Ignore the first N results
        where
            Note filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Note model
        order
            Order the returned Note records by any field
        distinct
            Filter Note records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Note]
            The list of all Note records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Note records
        notes = await Note.prisma().find_many(take=10)

        # find the first 5 Note records ordered by the entity_id field
        notes = await Note.prisma().find_many(
            take=5,
            order={
                'entity_id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
        include: Optional[types.NoteInclude] = None,
        order: Optional[Union[types.NoteOrderByInput, List[types.NoteOrderByInput]]] = None,
        distinct: Optional[List[types.NoteScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Note record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Note filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Note model
        order
            Order the returned Note records by any field
        distinct
            Filter Note records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Note
            The first Note record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Note record ordered by the entity_type field
        note = await Note.prisma().find_first(
            skip=1,
            order={
                'entity_type': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
        include: Optional[types.NoteInclude] = None,
        order: Optional[Union[types.NoteOrderByInput, List[types.NoteOrderByInput]]] = None,
        distinct: Optional[List[types.NoteScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Note record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Note filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Note model
        order
            Order the returned Note records by any field
        distinct
            Filter Note records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Note
            The first Note record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Note record ordered by the content field
        note = await Note.prisma().find_first_or_raise(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.NoteUpdateInput,
        where: types.NoteWhereUniqueInput,
        include: Optional[types.NoteInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Note record.

        Parameters
        ----------
        data
            Note record data specifying what to update
        where
            Note filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The updated Note record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        note = await Note.prisma().update(
            where={
                'id': 'icadbcehj',
            },
            data={
                # data to update the Note record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.NoteWhereUniqueInput,
        data: types.NoteUpsertInput,
        include: Optional[types.NoteInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Note filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Note model

        Returns
        -------
        prisma.models.Note
            The created or updated Note record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        note = await Note.prisma().upsert(
            where={
                'id': 'jchciaee',
            },
            data={
                'create': {
                    'id': 'jchciaee',
                    'user_id': 'faidicegb',
                    'entity_id': 'bacecgfhbe',
                    'entity_type': 'ihcahiead',
                },
                'update': {
                    'user_id': 'faidicegb',
                    'entity_id': 'bacecgfhbe',
                    'entity_type': 'ihcahiead',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.NoteUpdateManyMutationInput,
        where: types.NoteWhereInput,
    ) -> int:
        """Update multiple Note records

        Parameters
        ----------
        data
            Note data to update the selected Note records to
        where
            Filter to select the Note records to update

        Returns
        -------
        int
            The total number of Note records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Note records
        total = await Note.prisma().update_many(
            data={
                'created_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Note records present in the database

        Parameters
        ----------
        select
            Select the Note fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Note filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NoteCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Note.prisma().count()

        # results: prisma.types.NoteCountAggregateOutput
        results = await Note.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.NoteCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> types.NoteCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.NoteCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.NoteWhereInput] = None,
        cursor: Optional[types.NoteWhereUniqueInput] = None,
    ) -> Union[int, types.NoteCountAggregateOutput]:
        """Count the number of Note records present in the database

        Parameters
        ----------
        select
            Select the Note fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Note filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.NoteCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Note.prisma().count()

        # results: prisma.types.NoteCountAggregateOutput
        results = await Note.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.NoteCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.NoteWhereInput] = None
    ) -> int:
        """Delete multiple Note records.

        Parameters
        ----------
        where
            Optional Note filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Note records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Note records
        total = await Note.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.NoteScalarFieldKeys'],
        *,
        where: Optional['types.NoteWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.NoteAvgAggregateInput'] = None,
        sum: Optional['types.NoteSumAggregateInput'] = None,
        min: Optional['types.NoteMinAggregateInput'] = None,
        max: Optional['types.NoteMaxAggregateInput'] = None,
        having: Optional['types.NoteScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.NoteCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.NoteScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.NoteScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.NoteGroupByOutput']:
        """Group Note records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Note fields to group records by
        where
            Note filter to select records
        take
            Limit the maximum number of Note records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.NoteGroupByOutput]
            A list of dictionaries representing the Note record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Note records by user_id values
        # and count how many records are in each group
        results = await Note.prisma().group_by(
            ['user_id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class IssueActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Issue]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Issue.prisma().query_raw(
            'SELECT * FROM Issue WHERE id = ?',
            'deeificjd',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Issue
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Issue.prisma().query_first(
            'SELECT * FROM Issue WHERE subject_id = ?',
            'bbcbhebbda',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.IssueCreateInput,
        include: Optional[types.IssueInclude] = None
    ) -> _PrismaModelT:
        """Create a new Issue record.

        Parameters
        ----------
        data
            Issue record data
        include
            Specifies which relations should be loaded on the returned Issue model

        Returns
        -------
        prisma.models.Issue
            The created Issue record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Issue record from just the required fields
        issue = await Issue.prisma().create(
            data={
                # data to create a Issue record
                'subject_id': 'bejfijgcfb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.IssueCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Issue records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Issue record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Issue.prisma().create_many(
            data=[
                {
                    # data to create a Issue record
                    'subject_id': 'caifcbgii',
                },
                {
                    # data to create a Issue record
                    'subject_id': 'igaibbfgj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.IssueWhereUniqueInput,
        include: Optional[types.IssueInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Issue record.

        Parameters
        ----------
        where
            Issue filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Issue model

        Returns
        -------
        prisma.models.Issue
            The deleted Issue record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        issue = await Issue.prisma().delete(
            where={
                'id': 'bggajdcbbi',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.IssueWhereUniqueInput,
        include: Optional[types.IssueInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Issue record.

        Parameters
        ----------
        where
            Issue filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Issue model

        Returns
        -------
        prisma.models.Issue
            The found Issue record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        issue = await Issue.prisma().find_unique(
            where={
                'id': 'fcfhgbjed',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.IssueWhereUniqueInput,
        include: Optional[types.IssueInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Issue record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Issue filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Issue model

        Returns
        -------
        prisma.models.Issue
            The found Issue record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        issue = await Issue.prisma().find_unique_or_raise(
            where={
                'id': 'hdgcajhjg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.IssueWhereInput] = None,
        cursor: Optional[types.IssueWhereUniqueInput] = None,
        include: Optional[types.IssueInclude] = None,
        order: Optional[Union[types.IssueOrderByInput, List[types.IssueOrderByInput]]] = None,
        distinct: Optional[List[types.IssueScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Issue records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Issue records returned
        skip
            Ignore the first N results
        where
            Issue filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Issue model
        order
            Order the returned Issue records by any field
        distinct
            Filter Issue records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Issue]
            The list of all Issue records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Issue records
        issues = await Issue.prisma().find_many(take=10)

        # find the first 5 Issue records ordered by the title field
        issues = await Issue.prisma().find_many(
            take=5,
            order={
                'title': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.IssueWhereInput] = None,
        cursor: Optional[types.IssueWhereUniqueInput] = None,
        include: Optional[types.IssueInclude] = None,
        order: Optional[Union[types.IssueOrderByInput, List[types.IssueOrderByInput]]] = None,
        distinct: Optional[List[types.IssueScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Issue record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Issue filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Issue model
        order
            Order the returned Issue records by any field
        distinct
            Filter Issue records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Issue
            The first Issue record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Issue record ordered by the content field
        issue = await Issue.prisma().find_first(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.IssueWhereInput] = None,
        cursor: Optional[types.IssueWhereUniqueInput] = None,
        include: Optional[types.IssueInclude] = None,
        order: Optional[Union[types.IssueOrderByInput, List[types.IssueOrderByInput]]] = None,
        distinct: Optional[List[types.IssueScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Issue record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Issue filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Issue model
        order
            Order the returned Issue records by any field
        distinct
            Filter Issue records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Issue
            The first Issue record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Issue record ordered by the status field
        issue = await Issue.prisma().find_first_or_raise(
            skip=1,
            order={
                'status': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.IssueUpdateInput,
        where: types.IssueWhereUniqueInput,
        include: Optional[types.IssueInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Issue record.

        Parameters
        ----------
        data
            Issue record data specifying what to update
        where
            Issue filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Issue model

        Returns
        -------
        prisma.models.Issue
            The updated Issue record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        issue = await Issue.prisma().update(
            where={
                'id': 'ejdjahicb',
            },
            data={
                # data to update the Issue record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.IssueWhereUniqueInput,
        data: types.IssueUpsertInput,
        include: Optional[types.IssueInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Issue filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Issue model

        Returns
        -------
        prisma.models.Issue
            The created or updated Issue record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        issue = await Issue.prisma().upsert(
            where={
                'id': 'gdjgigfgc',
            },
            data={
                'create': {
                    'id': 'gdjgigfgc',
                    'subject_id': 'igaibbfgj',
                },
                'update': {
                    'subject_id': 'igaibbfgj',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.IssueUpdateManyMutationInput,
        where: types.IssueWhereInput,
    ) -> int:
        """Update multiple Issue records

        Parameters
        ----------
        data
            Issue data to update the selected Issue records to
        where
            Filter to select the Issue records to update

        Returns
        -------
        int
            The total number of Issue records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Issue records
        total = await Issue.prisma().update_many(
            data={
                'priority': 'gfeaahdeh'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.IssueWhereInput] = None,
        cursor: Optional[types.IssueWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Issue records present in the database

        Parameters
        ----------
        select
            Select the Issue fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Issue filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.IssueCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Issue.prisma().count()

        # results: prisma.types.IssueCountAggregateOutput
        results = await Issue.prisma().count(
            select={
                '_all': True,
                'created_at': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.IssueCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.IssueWhereInput] = None,
        cursor: Optional[types.IssueWhereUniqueInput] = None,
    ) -> types.IssueCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.IssueCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.IssueWhereInput] = None,
        cursor: Optional[types.IssueWhereUniqueInput] = None,
    ) -> Union[int, types.IssueCountAggregateOutput]:
        """Count the number of Issue records present in the database

        Parameters
        ----------
        select
            Select the Issue fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Issue filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.IssueCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Issue.prisma().count()

        # results: prisma.types.IssueCountAggregateOutput
        results = await Issue.prisma().count(
            select={
                '_all': True,
                'updated_at': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.IssueCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.IssueWhereInput] = None
    ) -> int:
        """Delete multiple Issue records.

        Parameters
        ----------
        where
            Optional Issue filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Issue records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Issue records
        total = await Issue.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.IssueScalarFieldKeys'],
        *,
        where: Optional['types.IssueWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.IssueAvgAggregateInput'] = None,
        sum: Optional['types.IssueSumAggregateInput'] = None,
        min: Optional['types.IssueMinAggregateInput'] = None,
        max: Optional['types.IssueMaxAggregateInput'] = None,
        having: Optional['types.IssueScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.IssueCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.IssueScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.IssueScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.IssueGroupByOutput']:
        """Group Issue records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Issue fields to group records by
        where
            Issue filter to select records
        take
            Limit the maximum number of Issue records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.IssueGroupByOutput]
            A list of dictionaries representing the Issue record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Issue records by id values
        # and count how many records are in each group
        results = await Issue.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models