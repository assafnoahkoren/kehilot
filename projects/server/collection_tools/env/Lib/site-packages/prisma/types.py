# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
            },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
            },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
            },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
            },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    picture_url: Optional[_str]
    first_name: Optional[_str]
    last_name: Optional[_str]
    phone: Optional[_str]
    password: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]
    AuthChallenge: 'AuthChallengeCreateManyNestedWithoutRelationsInput'
    GroupUserRole: 'GroupUserRoleCreateManyNestedWithoutRelationsInput'
    Note: 'NoteCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    picture_url: Optional[_str]
    first_name: Optional[_str]
    last_name: Optional[_str]
    phone: Optional[_str]
    password: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    picture_url: Optional[_str]
    first_name: Optional[_str]
    last_name: Optional[_str]
    phone: Optional[_str]
    password: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]
    AuthChallenge: 'AuthChallengeUpdateManyWithoutRelationsInput'
    GroupUserRole: 'GroupUserRoleUpdateManyWithoutRelationsInput'
    Note: 'NoteUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    picture_url: Optional[_str]
    first_name: Optional[_str]
    last_name: Optional[_str]
    phone: Optional[_str]
    password: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_picture_url_OrderByInput = TypedDict(
    '_User_picture_url_OrderByInput',
    {
        'picture_url': 'SortOrder',
    },
    total=True
)

_User_first_name_OrderByInput = TypedDict(
    '_User_first_name_OrderByInput',
    {
        'first_name': 'SortOrder',
    },
    total=True
)

_User_last_name_OrderByInput = TypedDict(
    '_User_last_name_OrderByInput',
    {
        'last_name': 'SortOrder',
    },
    total=True
)

_User_phone_OrderByInput = TypedDict(
    '_User_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_created_at_OrderByInput = TypedDict(
    '_User_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_User_updated_at_OrderByInput = TypedDict(
    '_User_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_picture_url_OrderByInput',
    '_User_first_name_OrderByInput',
    '_User_last_name_OrderByInput',
    '_User_phone_OrderByInput',
    '_User_password_OrderByInput',
    '_User_created_at_OrderByInput',
    '_User_updated_at_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromUser']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUser']
    Note: Union[bool, 'FindManyNoteArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromUserRecursive1']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUserRecursive1']
    Note: Union[bool, 'FindManyNoteArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromUserRecursive2']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUserRecursive2']
    Note: Union[bool, 'FindManyNoteArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromUserRecursive3']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUserRecursive3']
    Note: Union[bool, 'FindManyNoteArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromUserRecursive4']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUserRecursive4']
    Note: Union[bool, 'FindManyNoteArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AuthChallengeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class AuthChallengeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class AuthChallengeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class AuthChallengeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class AuthChallengeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AuthChallengeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class AuthChallengeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class AuthChallengeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class AuthChallengeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class AuthChallengeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAuthChallengeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class FindManyAuthChallengeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class FindManyAuthChallengeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class FindManyAuthChallengeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class FindManyAuthChallengeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    
    

class SubjectIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    Issue: Union[bool, 'FindManyIssueArgsFromUserRecursive1']


class SubjectIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    Issue: Union[bool, 'FindManyIssueArgsFromUserRecursive2']


class SubjectIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    Issue: Union[bool, 'FindManyIssueArgsFromUserRecursive3']


class SubjectIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    Issue: Union[bool, 'FindManyIssueArgsFromUserRecursive4']


class SubjectIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SubjectArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubjectIncludeFromSubjectRecursive1'


class SubjectArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubjectIncludeFromSubjectRecursive2'


class SubjectArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubjectIncludeFromSubjectRecursive3'


class SubjectArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SubjectIncludeFromSubjectRecursive4'


class SubjectArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySubjectArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive1'


class FindManySubjectArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive2'


class FindManySubjectArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive3'


class FindManySubjectArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive4'


class FindManySubjectArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    
    

class GroupIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUserRecursive1']


class GroupIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUserRecursive2']


class GroupIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUserRecursive3']


class GroupIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromUserRecursive4']


class GroupIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class GroupArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyGroupArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class GroupUserRoleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    group: Union[bool, 'GroupArgsFromUserRecursive1']
    User: Union[bool, 'UserArgsFromUserRecursive1']


class GroupUserRoleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    group: Union[bool, 'GroupArgsFromUserRecursive2']
    User: Union[bool, 'UserArgsFromUserRecursive2']


class GroupUserRoleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    group: Union[bool, 'GroupArgsFromUserRecursive3']
    User: Union[bool, 'UserArgsFromUserRecursive3']


class GroupUserRoleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    group: Union[bool, 'GroupArgsFromUserRecursive4']
    User: Union[bool, 'UserArgsFromUserRecursive4']


class GroupUserRoleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class GroupUserRoleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class GroupUserRoleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class GroupUserRoleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class GroupUserRoleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class GroupUserRoleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyGroupUserRoleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class FindManyGroupUserRoleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class FindManyGroupUserRoleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class FindManyGroupUserRoleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class FindManyGroupUserRoleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    
    

class NoteIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class NoteIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class NoteIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class NoteIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class NoteIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class NoteArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyNoteArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class IssueIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    subject: Union[bool, 'SubjectArgsFromUserRecursive1']


class IssueIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    subject: Union[bool, 'SubjectArgsFromUserRecursive2']


class IssueIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    subject: Union[bool, 'SubjectArgsFromUserRecursive3']


class IssueIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    subject: Union[bool, 'SubjectArgsFromUserRecursive4']


class IssueIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class IssueArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'IssueIncludeFromIssueRecursive1'


class IssueArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'IssueIncludeFromIssueRecursive2'


class IssueArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'IssueIncludeFromIssueRecursive3'


class IssueArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'IssueIncludeFromIssueRecursive4'


class IssueArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyIssueArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive1'


class FindManyIssueArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive2'


class FindManyIssueArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive3'


class FindManyIssueArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive4'


class FindManyIssueArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    picture_url: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    AuthChallenge: 'AuthChallengeListRelationFilter'
    GroupUserRole: 'GroupUserRoleListRelationFilter'
    Note: 'NoteListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    picture_url: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    AuthChallenge: 'AuthChallengeListRelationFilter'
    GroupUserRole: 'GroupUserRoleListRelationFilter'
    Note: 'NoteListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    picture_url: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    AuthChallenge: 'AuthChallengeListRelationFilter'
    GroupUserRole: 'GroupUserRoleListRelationFilter'
    Note: 'NoteListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    picture_url: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    AuthChallenge: 'AuthChallengeListRelationFilter'
    GroupUserRole: 'GroupUserRoleListRelationFilter'
    Note: 'NoteListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    picture_url: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    AuthChallenge: 'AuthChallengeListRelationFilter'
    GroupUserRole: 'GroupUserRoleListRelationFilter'
    Note: 'NoteListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    picture_url: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    picture_url: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    picture_url: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    picture_url: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    picture_url: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    picture_url: _str
    first_name: _str
    last_name: _str
    phone: _str
    password: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    picture_url: _str
    first_name: _str
    last_name: _str
    phone: _str
    password: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    picture_url: bool
    first_name: bool
    last_name: bool
    phone: bool
    password: bool
    created_at: bool
    updated_at: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    picture_url: bool
    first_name: bool
    last_name: bool
    phone: bool
    password: bool
    created_at: bool
    updated_at: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'picture_url': bool,
        'first_name': bool,
        'last_name': bool,
        'phone': bool,
        'password': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'picture_url': int,
        'first_name': int,
        'last_name': int,
        'phone': int,
        'password': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'picture_url',
    'first_name',
    'last_name',
    'phone',
    'password',
    'created_at',
    'updated_at',
    'AuthChallenge',
    'GroupUserRole',
    'Note',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'picture_url',
    'first_name',
    'last_name',
    'phone',
    'password',
    'created_at',
    'updated_at',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'AuthChallenge',
        'GroupUserRole',
        'Note',
    ]

# AuthChallenge types

class AuthChallengeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the AuthChallenge create method"""
    id: _str
    user_id: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class AuthChallengeCreateInput(AuthChallengeOptionalCreateInput):
    """Required arguments to the AuthChallenge create method"""
    code: _str
    expired_at: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AuthChallengeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the AuthChallenge create method, without relations"""
    id: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class AuthChallengeCreateWithoutRelationsInput(AuthChallengeOptionalCreateWithoutRelationsInput):
    """Required arguments to the AuthChallenge create method, without relations"""
    code: _str
    expired_at: datetime.datetime


class AuthChallengeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AuthChallengeCreateWithoutRelationsInput'
    connect: 'AuthChallengeWhereUniqueInput'


class AuthChallengeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AuthChallengeCreateWithoutRelationsInput', List['AuthChallengeCreateWithoutRelationsInput']]
    connect: Union['AuthChallengeWhereUniqueInput', List['AuthChallengeWhereUniqueInput']]


_AuthChallengeWhereUnique_id_Input = TypedDict(
    '_AuthChallengeWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

AuthChallengeWhereUniqueInput = _AuthChallengeWhereUnique_id_Input


class AuthChallengeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    code: _str
    expired_at: datetime.datetime
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class AuthChallengeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    code: _str
    expired_at: datetime.datetime
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class AuthChallengeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AuthChallengeCreateWithoutRelationsInput']
    connect: List['AuthChallengeWhereUniqueInput']
    set: List['AuthChallengeWhereUniqueInput']
    disconnect: List['AuthChallengeWhereUniqueInput']
    delete: List['AuthChallengeWhereUniqueInput']

    # TODO
    # update: List['AuthChallengeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AuthChallengeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AuthChallengeScalarWhereInput']
    # upsert: List['AuthChallengeUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['AuthChallengeCreateOrConnectWithoutRelationsInput']


class AuthChallengeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AuthChallengeCreateWithoutRelationsInput'
    connect: 'AuthChallengeWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AuthChallengeUpdateInput'
    # upsert: 'AuthChallengeUpsertWithoutRelationsInput'
    # connectOrCreate: 'AuthChallengeCreateOrConnectWithoutRelationsInput'


class AuthChallengeUpsertInput(TypedDict):
    create: 'AuthChallengeCreateInput'
    update: 'AuthChallengeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_AuthChallenge_id_OrderByInput = TypedDict(
    '_AuthChallenge_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_AuthChallenge_user_id_OrderByInput = TypedDict(
    '_AuthChallenge_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_AuthChallenge_code_OrderByInput = TypedDict(
    '_AuthChallenge_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_AuthChallenge_expired_at_OrderByInput = TypedDict(
    '_AuthChallenge_expired_at_OrderByInput',
    {
        'expired_at': 'SortOrder',
    },
    total=True
)

_AuthChallenge_created_at_OrderByInput = TypedDict(
    '_AuthChallenge_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_AuthChallenge_updated_at_OrderByInput = TypedDict(
    '_AuthChallenge_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

AuthChallengeOrderByInput = Union[
    '_AuthChallenge_id_OrderByInput',
    '_AuthChallenge_user_id_OrderByInput',
    '_AuthChallenge_code_OrderByInput',
    '_AuthChallenge_expired_at_OrderByInput',
    '_AuthChallenge_created_at_OrderByInput',
    '_AuthChallenge_updated_at_OrderByInput',
]



# recursive AuthChallenge types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AuthChallengeRelationFilter = TypedDict(
    'AuthChallengeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AuthChallengeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AuthChallengeInclude(TypedDict, total=False):
    """AuthChallenge relational arguments"""
    user: Union[bool, 'UserArgsFromAuthChallenge']


    

class UserIncludeFromAuthChallenge(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromAuthChallengeRecursive1']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromAuthChallengeRecursive1']
    Note: Union[bool, 'FindManyNoteArgsFromAuthChallengeRecursive1']


class UserIncludeFromAuthChallengeRecursive1(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromAuthChallengeRecursive2']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromAuthChallengeRecursive2']
    Note: Union[bool, 'FindManyNoteArgsFromAuthChallengeRecursive2']


class UserIncludeFromAuthChallengeRecursive2(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromAuthChallengeRecursive3']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromAuthChallengeRecursive3']
    Note: Union[bool, 'FindManyNoteArgsFromAuthChallengeRecursive3']


class UserIncludeFromAuthChallengeRecursive3(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromAuthChallengeRecursive4']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromAuthChallengeRecursive4']
    Note: Union[bool, 'FindManyNoteArgsFromAuthChallengeRecursive4']


class UserIncludeFromAuthChallengeRecursive4(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""

    

class UserArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    
    

class FindManyUserArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AuthChallengeIncludeFromAuthChallenge(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    user: Union[bool, 'UserArgsFromAuthChallengeRecursive1']


class AuthChallengeIncludeFromAuthChallengeRecursive1(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    user: Union[bool, 'UserArgsFromAuthChallengeRecursive2']


class AuthChallengeIncludeFromAuthChallengeRecursive2(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    user: Union[bool, 'UserArgsFromAuthChallengeRecursive3']


class AuthChallengeIncludeFromAuthChallengeRecursive3(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    user: Union[bool, 'UserArgsFromAuthChallengeRecursive4']


class AuthChallengeIncludeFromAuthChallengeRecursive4(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""

    

class AuthChallengeArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class AuthChallengeArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class AuthChallengeArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class AuthChallengeArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class AuthChallengeArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    
    

class FindManyAuthChallengeArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class FindManyAuthChallengeArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class FindManyAuthChallengeArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class FindManyAuthChallengeArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class FindManyAuthChallengeArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    
    

class SubjectIncludeFromAuthChallenge(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    Issue: Union[bool, 'FindManyIssueArgsFromAuthChallengeRecursive1']


class SubjectIncludeFromAuthChallengeRecursive1(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    Issue: Union[bool, 'FindManyIssueArgsFromAuthChallengeRecursive2']


class SubjectIncludeFromAuthChallengeRecursive2(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    Issue: Union[bool, 'FindManyIssueArgsFromAuthChallengeRecursive3']


class SubjectIncludeFromAuthChallengeRecursive3(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    Issue: Union[bool, 'FindManyIssueArgsFromAuthChallengeRecursive4']


class SubjectIncludeFromAuthChallengeRecursive4(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""

    

class SubjectArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'SubjectIncludeFromSubjectRecursive1'


class SubjectArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'SubjectIncludeFromSubjectRecursive2'


class SubjectArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'SubjectIncludeFromSubjectRecursive3'


class SubjectArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'SubjectIncludeFromSubjectRecursive4'


class SubjectArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    
    

class FindManySubjectArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive1'


class FindManySubjectArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive2'


class FindManySubjectArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive3'


class FindManySubjectArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive4'


class FindManySubjectArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    
    

class GroupIncludeFromAuthChallenge(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromAuthChallengeRecursive1']


class GroupIncludeFromAuthChallengeRecursive1(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromAuthChallengeRecursive2']


class GroupIncludeFromAuthChallengeRecursive2(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromAuthChallengeRecursive3']


class GroupIncludeFromAuthChallengeRecursive3(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromAuthChallengeRecursive4']


class GroupIncludeFromAuthChallengeRecursive4(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""

    

class GroupArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    
    

class FindManyGroupArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class GroupUserRoleIncludeFromAuthChallenge(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    group: Union[bool, 'GroupArgsFromAuthChallengeRecursive1']
    User: Union[bool, 'UserArgsFromAuthChallengeRecursive1']


class GroupUserRoleIncludeFromAuthChallengeRecursive1(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    group: Union[bool, 'GroupArgsFromAuthChallengeRecursive2']
    User: Union[bool, 'UserArgsFromAuthChallengeRecursive2']


class GroupUserRoleIncludeFromAuthChallengeRecursive2(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    group: Union[bool, 'GroupArgsFromAuthChallengeRecursive3']
    User: Union[bool, 'UserArgsFromAuthChallengeRecursive3']


class GroupUserRoleIncludeFromAuthChallengeRecursive3(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    group: Union[bool, 'GroupArgsFromAuthChallengeRecursive4']
    User: Union[bool, 'UserArgsFromAuthChallengeRecursive4']


class GroupUserRoleIncludeFromAuthChallengeRecursive4(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""

    

class GroupUserRoleArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class GroupUserRoleArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class GroupUserRoleArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class GroupUserRoleArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class GroupUserRoleArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    
    

class FindManyGroupUserRoleArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class FindManyGroupUserRoleArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class FindManyGroupUserRoleArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class FindManyGroupUserRoleArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class FindManyGroupUserRoleArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    
    

class NoteIncludeFromAuthChallenge(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    user: Union[bool, 'UserArgsFromAuthChallengeRecursive1']


class NoteIncludeFromAuthChallengeRecursive1(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    user: Union[bool, 'UserArgsFromAuthChallengeRecursive2']


class NoteIncludeFromAuthChallengeRecursive2(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    user: Union[bool, 'UserArgsFromAuthChallengeRecursive3']


class NoteIncludeFromAuthChallengeRecursive3(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    user: Union[bool, 'UserArgsFromAuthChallengeRecursive4']


class NoteIncludeFromAuthChallengeRecursive4(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""

    

class NoteArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    
    

class FindManyNoteArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class IssueIncludeFromAuthChallenge(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    subject: Union[bool, 'SubjectArgsFromAuthChallengeRecursive1']


class IssueIncludeFromAuthChallengeRecursive1(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    subject: Union[bool, 'SubjectArgsFromAuthChallengeRecursive2']


class IssueIncludeFromAuthChallengeRecursive2(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    subject: Union[bool, 'SubjectArgsFromAuthChallengeRecursive3']


class IssueIncludeFromAuthChallengeRecursive3(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""
    subject: Union[bool, 'SubjectArgsFromAuthChallengeRecursive4']


class IssueIncludeFromAuthChallengeRecursive4(TypedDict, total=False):
    """Relational arguments for AuthChallenge"""

    

class IssueArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'IssueIncludeFromIssueRecursive1'


class IssueArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'IssueIncludeFromIssueRecursive2'


class IssueArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'IssueIncludeFromIssueRecursive3'


class IssueArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    include: 'IssueIncludeFromIssueRecursive4'


class IssueArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    
    

class FindManyIssueArgsFromAuthChallenge(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive1'


class FindManyIssueArgsFromAuthChallengeRecursive1(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive2'


class FindManyIssueArgsFromAuthChallengeRecursive2(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive3'


class FindManyIssueArgsFromAuthChallengeRecursive3(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive4'


class FindManyIssueArgsFromAuthChallengeRecursive4(TypedDict, total=False):
    """Arguments for AuthChallenge"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    


FindManyAuthChallengeArgs = FindManyAuthChallengeArgsFromAuthChallenge
FindFirstAuthChallengeArgs = FindManyAuthChallengeArgsFromAuthChallenge


    

class AuthChallengeWhereInput(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    code: Union[_str, 'types.StringFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AuthChallengeWhereInputRecursive1', List['AuthChallengeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AuthChallengeWhereInputRecursive1']
    OR: List['AuthChallengeWhereInputRecursive1']
    NOT: List['AuthChallengeWhereInputRecursive1']


class AuthChallengeWhereInputRecursive1(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    code: Union[_str, 'types.StringFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AuthChallengeWhereInputRecursive2', List['AuthChallengeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AuthChallengeWhereInputRecursive2']
    OR: List['AuthChallengeWhereInputRecursive2']
    NOT: List['AuthChallengeWhereInputRecursive2']


class AuthChallengeWhereInputRecursive2(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    code: Union[_str, 'types.StringFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AuthChallengeWhereInputRecursive3', List['AuthChallengeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AuthChallengeWhereInputRecursive3']
    OR: List['AuthChallengeWhereInputRecursive3']
    NOT: List['AuthChallengeWhereInputRecursive3']


class AuthChallengeWhereInputRecursive3(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    code: Union[_str, 'types.StringFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AuthChallengeWhereInputRecursive4', List['AuthChallengeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AuthChallengeWhereInputRecursive4']
    OR: List['AuthChallengeWhereInputRecursive4']
    NOT: List['AuthChallengeWhereInputRecursive4']


class AuthChallengeWhereInputRecursive4(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    code: Union[_str, 'types.StringFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']



# aggregate AuthChallenge types


    

class AuthChallengeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AuthChallengeScalarWhereWithAggregatesInputRecursive1']
    OR: List['AuthChallengeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AuthChallengeScalarWhereWithAggregatesInputRecursive1']


class AuthChallengeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AuthChallengeScalarWhereWithAggregatesInputRecursive2']
    OR: List['AuthChallengeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AuthChallengeScalarWhereWithAggregatesInputRecursive2']


class AuthChallengeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AuthChallengeScalarWhereWithAggregatesInputRecursive3']
    OR: List['AuthChallengeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AuthChallengeScalarWhereWithAggregatesInputRecursive3']


class AuthChallengeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AuthChallengeScalarWhereWithAggregatesInputRecursive4']
    OR: List['AuthChallengeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AuthChallengeScalarWhereWithAggregatesInputRecursive4']


class AuthChallengeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """AuthChallenge arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    expired_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AuthChallengeGroupByOutput(TypedDict, total=False):
    id: _str
    user_id: _str
    code: _str
    expired_at: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'AuthChallengeSumAggregateOutput'
    _avg: 'AuthChallengeAvgAggregateOutput'
    _min: 'AuthChallengeMinAggregateOutput'
    _max: 'AuthChallengeMaxAggregateOutput'
    _count: 'AuthChallengeCountAggregateOutput'


class AuthChallengeAvgAggregateOutput(TypedDict, total=False):
    """AuthChallenge output for aggregating averages"""


class AuthChallengeSumAggregateOutput(TypedDict, total=False):
    """AuthChallenge output for aggregating sums"""


class AuthChallengeScalarAggregateOutput(TypedDict, total=False):
    """AuthChallenge output including scalar fields"""
    id: _str
    user_id: _str
    code: _str
    expired_at: datetime.datetime
    created_at: datetime.datetime
    updated_at: datetime.datetime


AuthChallengeMinAggregateOutput = AuthChallengeScalarAggregateOutput
AuthChallengeMaxAggregateOutput = AuthChallengeScalarAggregateOutput


class AuthChallengeMaxAggregateInput(TypedDict, total=False):
    """AuthChallenge input for aggregating by max"""
    id: bool
    user_id: bool
    code: bool
    expired_at: bool
    created_at: bool
    updated_at: bool


class AuthChallengeMinAggregateInput(TypedDict, total=False):
    """AuthChallenge input for aggregating by min"""
    id: bool
    user_id: bool
    code: bool
    expired_at: bool
    created_at: bool
    updated_at: bool


class AuthChallengeNumberAggregateInput(TypedDict, total=False):
    """AuthChallenge input for aggregating numbers"""


AuthChallengeAvgAggregateInput = AuthChallengeNumberAggregateInput
AuthChallengeSumAggregateInput = AuthChallengeNumberAggregateInput


AuthChallengeCountAggregateInput = TypedDict(
    'AuthChallengeCountAggregateInput',
    {
        'id': bool,
        'user_id': bool,
        'code': bool,
        'expired_at': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

AuthChallengeCountAggregateOutput = TypedDict(
    'AuthChallengeCountAggregateOutput',
    {
        'id': int,
        'user_id': int,
        'code': int,
        'expired_at': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


AuthChallengeKeys = Literal[
    'id',
    'user_id',
    'user',
    'code',
    'expired_at',
    'created_at',
    'updated_at',
]
AuthChallengeScalarFieldKeys = Literal[
    'id',
    'user_id',
    'code',
    'expired_at',
    'created_at',
    'updated_at',
]
AuthChallengeScalarFieldKeysT = TypeVar('AuthChallengeScalarFieldKeysT', bound=AuthChallengeScalarFieldKeys)

AuthChallengeRelationalFieldKeys = Literal[
        'user',
    ]

# Subject types

class SubjectOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Subject create method"""
    id: _str
    gov_id: Optional[_str]
    phone: Optional[_str]
    first_name: Optional[_str]
    middle_name: Optional[_str]
    last_name: Optional[_str]
    date_of_birth: Optional[datetime.datetime]
    mother_name: Optional[_str]
    father_name: Optional[_str]
    sex: Optional[_str]
    street: Optional[_str]
    city: Optional[_str]
    postal_code: Optional[_str]
    country: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]
    Issue: 'IssueCreateManyNestedWithoutRelationsInput'


class SubjectCreateInput(SubjectOptionalCreateInput):
    """Required arguments to the Subject create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SubjectOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Subject create method, without relations"""
    id: _str
    gov_id: Optional[_str]
    phone: Optional[_str]
    first_name: Optional[_str]
    middle_name: Optional[_str]
    last_name: Optional[_str]
    date_of_birth: Optional[datetime.datetime]
    mother_name: Optional[_str]
    father_name: Optional[_str]
    sex: Optional[_str]
    street: Optional[_str]
    city: Optional[_str]
    postal_code: Optional[_str]
    country: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class SubjectCreateWithoutRelationsInput(SubjectOptionalCreateWithoutRelationsInput):
    """Required arguments to the Subject create method, without relations"""


class SubjectCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SubjectCreateWithoutRelationsInput'
    connect: 'SubjectWhereUniqueInput'


class SubjectCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SubjectCreateWithoutRelationsInput', List['SubjectCreateWithoutRelationsInput']]
    connect: Union['SubjectWhereUniqueInput', List['SubjectWhereUniqueInput']]


_SubjectWhereUnique_id_Input = TypedDict(
    '_SubjectWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

SubjectWhereUniqueInput = _SubjectWhereUnique_id_Input


class SubjectUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    gov_id: Optional[_str]
    phone: Optional[_str]
    first_name: Optional[_str]
    middle_name: Optional[_str]
    last_name: Optional[_str]
    date_of_birth: Optional[datetime.datetime]
    mother_name: Optional[_str]
    father_name: Optional[_str]
    sex: Optional[_str]
    street: Optional[_str]
    city: Optional[_str]
    postal_code: Optional[_str]
    country: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]
    Issue: 'IssueUpdateManyWithoutRelationsInput'


class SubjectUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    gov_id: Optional[_str]
    phone: Optional[_str]
    first_name: Optional[_str]
    middle_name: Optional[_str]
    last_name: Optional[_str]
    date_of_birth: Optional[datetime.datetime]
    mother_name: Optional[_str]
    father_name: Optional[_str]
    sex: Optional[_str]
    street: Optional[_str]
    city: Optional[_str]
    postal_code: Optional[_str]
    country: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class SubjectUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SubjectCreateWithoutRelationsInput']
    connect: List['SubjectWhereUniqueInput']
    set: List['SubjectWhereUniqueInput']
    disconnect: List['SubjectWhereUniqueInput']
    delete: List['SubjectWhereUniqueInput']

    # TODO
    # update: List['SubjectUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SubjectUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SubjectScalarWhereInput']
    # upsert: List['SubjectUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['SubjectCreateOrConnectWithoutRelationsInput']


class SubjectUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SubjectCreateWithoutRelationsInput'
    connect: 'SubjectWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SubjectUpdateInput'
    # upsert: 'SubjectUpsertWithoutRelationsInput'
    # connectOrCreate: 'SubjectCreateOrConnectWithoutRelationsInput'


class SubjectUpsertInput(TypedDict):
    create: 'SubjectCreateInput'
    update: 'SubjectUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Subject_id_OrderByInput = TypedDict(
    '_Subject_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Subject_gov_id_OrderByInput = TypedDict(
    '_Subject_gov_id_OrderByInput',
    {
        'gov_id': 'SortOrder',
    },
    total=True
)

_Subject_phone_OrderByInput = TypedDict(
    '_Subject_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_Subject_first_name_OrderByInput = TypedDict(
    '_Subject_first_name_OrderByInput',
    {
        'first_name': 'SortOrder',
    },
    total=True
)

_Subject_middle_name_OrderByInput = TypedDict(
    '_Subject_middle_name_OrderByInput',
    {
        'middle_name': 'SortOrder',
    },
    total=True
)

_Subject_last_name_OrderByInput = TypedDict(
    '_Subject_last_name_OrderByInput',
    {
        'last_name': 'SortOrder',
    },
    total=True
)

_Subject_date_of_birth_OrderByInput = TypedDict(
    '_Subject_date_of_birth_OrderByInput',
    {
        'date_of_birth': 'SortOrder',
    },
    total=True
)

_Subject_mother_name_OrderByInput = TypedDict(
    '_Subject_mother_name_OrderByInput',
    {
        'mother_name': 'SortOrder',
    },
    total=True
)

_Subject_father_name_OrderByInput = TypedDict(
    '_Subject_father_name_OrderByInput',
    {
        'father_name': 'SortOrder',
    },
    total=True
)

_Subject_sex_OrderByInput = TypedDict(
    '_Subject_sex_OrderByInput',
    {
        'sex': 'SortOrder',
    },
    total=True
)

_Subject_street_OrderByInput = TypedDict(
    '_Subject_street_OrderByInput',
    {
        'street': 'SortOrder',
    },
    total=True
)

_Subject_city_OrderByInput = TypedDict(
    '_Subject_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_Subject_postal_code_OrderByInput = TypedDict(
    '_Subject_postal_code_OrderByInput',
    {
        'postal_code': 'SortOrder',
    },
    total=True
)

_Subject_country_OrderByInput = TypedDict(
    '_Subject_country_OrderByInput',
    {
        'country': 'SortOrder',
    },
    total=True
)

_Subject_created_at_OrderByInput = TypedDict(
    '_Subject_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Subject_updated_at_OrderByInput = TypedDict(
    '_Subject_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

SubjectOrderByInput = Union[
    '_Subject_id_OrderByInput',
    '_Subject_gov_id_OrderByInput',
    '_Subject_phone_OrderByInput',
    '_Subject_first_name_OrderByInput',
    '_Subject_middle_name_OrderByInput',
    '_Subject_last_name_OrderByInput',
    '_Subject_date_of_birth_OrderByInput',
    '_Subject_mother_name_OrderByInput',
    '_Subject_father_name_OrderByInput',
    '_Subject_sex_OrderByInput',
    '_Subject_street_OrderByInput',
    '_Subject_city_OrderByInput',
    '_Subject_postal_code_OrderByInput',
    '_Subject_country_OrderByInput',
    '_Subject_created_at_OrderByInput',
    '_Subject_updated_at_OrderByInput',
]



# recursive Subject types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SubjectRelationFilter = TypedDict(
    'SubjectRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SubjectListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SubjectInclude(TypedDict, total=False):
    """Subject relational arguments"""
    Issue: Union[bool, 'FindManyIssueArgsFromSubject']


    

class UserIncludeFromSubject(TypedDict, total=False):
    """Relational arguments for Subject"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromSubjectRecursive1']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromSubjectRecursive1']
    Note: Union[bool, 'FindManyNoteArgsFromSubjectRecursive1']


class UserIncludeFromSubjectRecursive1(TypedDict, total=False):
    """Relational arguments for Subject"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromSubjectRecursive2']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromSubjectRecursive2']
    Note: Union[bool, 'FindManyNoteArgsFromSubjectRecursive2']


class UserIncludeFromSubjectRecursive2(TypedDict, total=False):
    """Relational arguments for Subject"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromSubjectRecursive3']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromSubjectRecursive3']
    Note: Union[bool, 'FindManyNoteArgsFromSubjectRecursive3']


class UserIncludeFromSubjectRecursive3(TypedDict, total=False):
    """Relational arguments for Subject"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromSubjectRecursive4']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromSubjectRecursive4']
    Note: Union[bool, 'FindManyNoteArgsFromSubjectRecursive4']


class UserIncludeFromSubjectRecursive4(TypedDict, total=False):
    """Relational arguments for Subject"""

    

class UserArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    
    

class FindManyUserArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AuthChallengeIncludeFromSubject(TypedDict, total=False):
    """Relational arguments for Subject"""
    user: Union[bool, 'UserArgsFromSubjectRecursive1']


class AuthChallengeIncludeFromSubjectRecursive1(TypedDict, total=False):
    """Relational arguments for Subject"""
    user: Union[bool, 'UserArgsFromSubjectRecursive2']


class AuthChallengeIncludeFromSubjectRecursive2(TypedDict, total=False):
    """Relational arguments for Subject"""
    user: Union[bool, 'UserArgsFromSubjectRecursive3']


class AuthChallengeIncludeFromSubjectRecursive3(TypedDict, total=False):
    """Relational arguments for Subject"""
    user: Union[bool, 'UserArgsFromSubjectRecursive4']


class AuthChallengeIncludeFromSubjectRecursive4(TypedDict, total=False):
    """Relational arguments for Subject"""

    

class AuthChallengeArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class AuthChallengeArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class AuthChallengeArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class AuthChallengeArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class AuthChallengeArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    
    

class FindManyAuthChallengeArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class FindManyAuthChallengeArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class FindManyAuthChallengeArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class FindManyAuthChallengeArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class FindManyAuthChallengeArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    
    

class SubjectIncludeFromSubject(TypedDict, total=False):
    """Relational arguments for Subject"""
    Issue: Union[bool, 'FindManyIssueArgsFromSubjectRecursive1']


class SubjectIncludeFromSubjectRecursive1(TypedDict, total=False):
    """Relational arguments for Subject"""
    Issue: Union[bool, 'FindManyIssueArgsFromSubjectRecursive2']


class SubjectIncludeFromSubjectRecursive2(TypedDict, total=False):
    """Relational arguments for Subject"""
    Issue: Union[bool, 'FindManyIssueArgsFromSubjectRecursive3']


class SubjectIncludeFromSubjectRecursive3(TypedDict, total=False):
    """Relational arguments for Subject"""
    Issue: Union[bool, 'FindManyIssueArgsFromSubjectRecursive4']


class SubjectIncludeFromSubjectRecursive4(TypedDict, total=False):
    """Relational arguments for Subject"""

    

class SubjectArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'SubjectIncludeFromSubjectRecursive1'


class SubjectArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'SubjectIncludeFromSubjectRecursive2'


class SubjectArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'SubjectIncludeFromSubjectRecursive3'


class SubjectArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'SubjectIncludeFromSubjectRecursive4'


class SubjectArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    
    

class FindManySubjectArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive1'


class FindManySubjectArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive2'


class FindManySubjectArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive3'


class FindManySubjectArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive4'


class FindManySubjectArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    
    

class GroupIncludeFromSubject(TypedDict, total=False):
    """Relational arguments for Subject"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromSubjectRecursive1']


class GroupIncludeFromSubjectRecursive1(TypedDict, total=False):
    """Relational arguments for Subject"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromSubjectRecursive2']


class GroupIncludeFromSubjectRecursive2(TypedDict, total=False):
    """Relational arguments for Subject"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromSubjectRecursive3']


class GroupIncludeFromSubjectRecursive3(TypedDict, total=False):
    """Relational arguments for Subject"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromSubjectRecursive4']


class GroupIncludeFromSubjectRecursive4(TypedDict, total=False):
    """Relational arguments for Subject"""

    

class GroupArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    
    

class FindManyGroupArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class GroupUserRoleIncludeFromSubject(TypedDict, total=False):
    """Relational arguments for Subject"""
    group: Union[bool, 'GroupArgsFromSubjectRecursive1']
    User: Union[bool, 'UserArgsFromSubjectRecursive1']


class GroupUserRoleIncludeFromSubjectRecursive1(TypedDict, total=False):
    """Relational arguments for Subject"""
    group: Union[bool, 'GroupArgsFromSubjectRecursive2']
    User: Union[bool, 'UserArgsFromSubjectRecursive2']


class GroupUserRoleIncludeFromSubjectRecursive2(TypedDict, total=False):
    """Relational arguments for Subject"""
    group: Union[bool, 'GroupArgsFromSubjectRecursive3']
    User: Union[bool, 'UserArgsFromSubjectRecursive3']


class GroupUserRoleIncludeFromSubjectRecursive3(TypedDict, total=False):
    """Relational arguments for Subject"""
    group: Union[bool, 'GroupArgsFromSubjectRecursive4']
    User: Union[bool, 'UserArgsFromSubjectRecursive4']


class GroupUserRoleIncludeFromSubjectRecursive4(TypedDict, total=False):
    """Relational arguments for Subject"""

    

class GroupUserRoleArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class GroupUserRoleArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class GroupUserRoleArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class GroupUserRoleArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class GroupUserRoleArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    
    

class FindManyGroupUserRoleArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class FindManyGroupUserRoleArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class FindManyGroupUserRoleArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class FindManyGroupUserRoleArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class FindManyGroupUserRoleArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    
    

class NoteIncludeFromSubject(TypedDict, total=False):
    """Relational arguments for Subject"""
    user: Union[bool, 'UserArgsFromSubjectRecursive1']


class NoteIncludeFromSubjectRecursive1(TypedDict, total=False):
    """Relational arguments for Subject"""
    user: Union[bool, 'UserArgsFromSubjectRecursive2']


class NoteIncludeFromSubjectRecursive2(TypedDict, total=False):
    """Relational arguments for Subject"""
    user: Union[bool, 'UserArgsFromSubjectRecursive3']


class NoteIncludeFromSubjectRecursive3(TypedDict, total=False):
    """Relational arguments for Subject"""
    user: Union[bool, 'UserArgsFromSubjectRecursive4']


class NoteIncludeFromSubjectRecursive4(TypedDict, total=False):
    """Relational arguments for Subject"""

    

class NoteArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    
    

class FindManyNoteArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class IssueIncludeFromSubject(TypedDict, total=False):
    """Relational arguments for Subject"""
    subject: Union[bool, 'SubjectArgsFromSubjectRecursive1']


class IssueIncludeFromSubjectRecursive1(TypedDict, total=False):
    """Relational arguments for Subject"""
    subject: Union[bool, 'SubjectArgsFromSubjectRecursive2']


class IssueIncludeFromSubjectRecursive2(TypedDict, total=False):
    """Relational arguments for Subject"""
    subject: Union[bool, 'SubjectArgsFromSubjectRecursive3']


class IssueIncludeFromSubjectRecursive3(TypedDict, total=False):
    """Relational arguments for Subject"""
    subject: Union[bool, 'SubjectArgsFromSubjectRecursive4']


class IssueIncludeFromSubjectRecursive4(TypedDict, total=False):
    """Relational arguments for Subject"""

    

class IssueArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'IssueIncludeFromIssueRecursive1'


class IssueArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'IssueIncludeFromIssueRecursive2'


class IssueArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'IssueIncludeFromIssueRecursive3'


class IssueArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    include: 'IssueIncludeFromIssueRecursive4'


class IssueArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    
    

class FindManyIssueArgsFromSubject(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive1'


class FindManyIssueArgsFromSubjectRecursive1(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive2'


class FindManyIssueArgsFromSubjectRecursive2(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive3'


class FindManyIssueArgsFromSubjectRecursive3(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive4'


class FindManyIssueArgsFromSubjectRecursive4(TypedDict, total=False):
    """Arguments for Subject"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    


FindManySubjectArgs = FindManySubjectArgsFromSubject
FindFirstSubjectArgs = FindManySubjectArgsFromSubject


    

class SubjectWhereInput(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    gov_id: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    middle_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    date_of_birth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mother_name: Union[None, _str, 'types.StringFilter']
    father_name: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    street: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    postal_code: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    Issue: 'IssueListRelationFilter'

    # should be noted that AND and NOT should be Union['SubjectWhereInputRecursive1', List['SubjectWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SubjectWhereInputRecursive1']
    OR: List['SubjectWhereInputRecursive1']
    NOT: List['SubjectWhereInputRecursive1']


class SubjectWhereInputRecursive1(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    gov_id: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    middle_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    date_of_birth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mother_name: Union[None, _str, 'types.StringFilter']
    father_name: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    street: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    postal_code: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    Issue: 'IssueListRelationFilter'

    # should be noted that AND and NOT should be Union['SubjectWhereInputRecursive2', List['SubjectWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SubjectWhereInputRecursive2']
    OR: List['SubjectWhereInputRecursive2']
    NOT: List['SubjectWhereInputRecursive2']


class SubjectWhereInputRecursive2(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    gov_id: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    middle_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    date_of_birth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mother_name: Union[None, _str, 'types.StringFilter']
    father_name: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    street: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    postal_code: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    Issue: 'IssueListRelationFilter'

    # should be noted that AND and NOT should be Union['SubjectWhereInputRecursive3', List['SubjectWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SubjectWhereInputRecursive3']
    OR: List['SubjectWhereInputRecursive3']
    NOT: List['SubjectWhereInputRecursive3']


class SubjectWhereInputRecursive3(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    gov_id: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    middle_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    date_of_birth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mother_name: Union[None, _str, 'types.StringFilter']
    father_name: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    street: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    postal_code: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    Issue: 'IssueListRelationFilter'

    # should be noted that AND and NOT should be Union['SubjectWhereInputRecursive4', List['SubjectWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SubjectWhereInputRecursive4']
    OR: List['SubjectWhereInputRecursive4']
    NOT: List['SubjectWhereInputRecursive4']


class SubjectWhereInputRecursive4(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    gov_id: Union[None, _str, 'types.StringFilter']
    phone: Union[None, _str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    middle_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    date_of_birth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    mother_name: Union[None, _str, 'types.StringFilter']
    father_name: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    street: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    postal_code: Union[None, _str, 'types.StringFilter']
    country: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    Issue: 'IssueListRelationFilter'



# aggregate Subject types


    

class SubjectScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    gov_id: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    middle_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    date_of_birth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mother_name: Union[_str, 'types.StringWithAggregatesFilter']
    father_name: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    street: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    postal_code: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubjectScalarWhereWithAggregatesInputRecursive1']
    OR: List['SubjectScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SubjectScalarWhereWithAggregatesInputRecursive1']


class SubjectScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    gov_id: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    middle_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    date_of_birth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mother_name: Union[_str, 'types.StringWithAggregatesFilter']
    father_name: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    street: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    postal_code: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubjectScalarWhereWithAggregatesInputRecursive2']
    OR: List['SubjectScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SubjectScalarWhereWithAggregatesInputRecursive2']


class SubjectScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    gov_id: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    middle_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    date_of_birth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mother_name: Union[_str, 'types.StringWithAggregatesFilter']
    father_name: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    street: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    postal_code: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubjectScalarWhereWithAggregatesInputRecursive3']
    OR: List['SubjectScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SubjectScalarWhereWithAggregatesInputRecursive3']


class SubjectScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    gov_id: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    middle_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    date_of_birth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mother_name: Union[_str, 'types.StringWithAggregatesFilter']
    father_name: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    street: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    postal_code: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SubjectScalarWhereWithAggregatesInputRecursive4']
    OR: List['SubjectScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SubjectScalarWhereWithAggregatesInputRecursive4']


class SubjectScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Subject arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    gov_id: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    middle_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    date_of_birth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    mother_name: Union[_str, 'types.StringWithAggregatesFilter']
    father_name: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    street: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']
    postal_code: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SubjectGroupByOutput(TypedDict, total=False):
    id: _str
    gov_id: _str
    phone: _str
    first_name: _str
    middle_name: _str
    last_name: _str
    date_of_birth: datetime.datetime
    mother_name: _str
    father_name: _str
    sex: _str
    street: _str
    city: _str
    postal_code: _str
    country: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'SubjectSumAggregateOutput'
    _avg: 'SubjectAvgAggregateOutput'
    _min: 'SubjectMinAggregateOutput'
    _max: 'SubjectMaxAggregateOutput'
    _count: 'SubjectCountAggregateOutput'


class SubjectAvgAggregateOutput(TypedDict, total=False):
    """Subject output for aggregating averages"""


class SubjectSumAggregateOutput(TypedDict, total=False):
    """Subject output for aggregating sums"""


class SubjectScalarAggregateOutput(TypedDict, total=False):
    """Subject output including scalar fields"""
    id: _str
    gov_id: _str
    phone: _str
    first_name: _str
    middle_name: _str
    last_name: _str
    date_of_birth: datetime.datetime
    mother_name: _str
    father_name: _str
    sex: _str
    street: _str
    city: _str
    postal_code: _str
    country: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


SubjectMinAggregateOutput = SubjectScalarAggregateOutput
SubjectMaxAggregateOutput = SubjectScalarAggregateOutput


class SubjectMaxAggregateInput(TypedDict, total=False):
    """Subject input for aggregating by max"""
    id: bool
    gov_id: bool
    phone: bool
    first_name: bool
    middle_name: bool
    last_name: bool
    date_of_birth: bool
    mother_name: bool
    father_name: bool
    sex: bool
    street: bool
    city: bool
    postal_code: bool
    country: bool
    created_at: bool
    updated_at: bool


class SubjectMinAggregateInput(TypedDict, total=False):
    """Subject input for aggregating by min"""
    id: bool
    gov_id: bool
    phone: bool
    first_name: bool
    middle_name: bool
    last_name: bool
    date_of_birth: bool
    mother_name: bool
    father_name: bool
    sex: bool
    street: bool
    city: bool
    postal_code: bool
    country: bool
    created_at: bool
    updated_at: bool


class SubjectNumberAggregateInput(TypedDict, total=False):
    """Subject input for aggregating numbers"""


SubjectAvgAggregateInput = SubjectNumberAggregateInput
SubjectSumAggregateInput = SubjectNumberAggregateInput


SubjectCountAggregateInput = TypedDict(
    'SubjectCountAggregateInput',
    {
        'id': bool,
        'gov_id': bool,
        'phone': bool,
        'first_name': bool,
        'middle_name': bool,
        'last_name': bool,
        'date_of_birth': bool,
        'mother_name': bool,
        'father_name': bool,
        'sex': bool,
        'street': bool,
        'city': bool,
        'postal_code': bool,
        'country': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

SubjectCountAggregateOutput = TypedDict(
    'SubjectCountAggregateOutput',
    {
        'id': int,
        'gov_id': int,
        'phone': int,
        'first_name': int,
        'middle_name': int,
        'last_name': int,
        'date_of_birth': int,
        'mother_name': int,
        'father_name': int,
        'sex': int,
        'street': int,
        'city': int,
        'postal_code': int,
        'country': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


SubjectKeys = Literal[
    'id',
    'gov_id',
    'phone',
    'first_name',
    'middle_name',
    'last_name',
    'date_of_birth',
    'mother_name',
    'father_name',
    'sex',
    'street',
    'city',
    'postal_code',
    'country',
    'created_at',
    'updated_at',
    'Issue',
]
SubjectScalarFieldKeys = Literal[
    'id',
    'gov_id',
    'phone',
    'first_name',
    'middle_name',
    'last_name',
    'date_of_birth',
    'mother_name',
    'father_name',
    'sex',
    'street',
    'city',
    'postal_code',
    'country',
    'created_at',
    'updated_at',
]
SubjectScalarFieldKeysT = TypeVar('SubjectScalarFieldKeysT', bound=SubjectScalarFieldKeys)

SubjectRelationalFieldKeys = Literal[
        'Issue',
    ]

# Group types

class GroupOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Group create method"""
    id: _str
    sql_where: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]
    GroupUserRole: 'GroupUserRoleCreateManyNestedWithoutRelationsInput'


class GroupCreateInput(GroupOptionalCreateInput):
    """Required arguments to the Group create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GroupOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Group create method, without relations"""
    id: _str
    sql_where: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class GroupCreateWithoutRelationsInput(GroupOptionalCreateWithoutRelationsInput):
    """Required arguments to the Group create method, without relations"""
    name: _str


class GroupCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GroupCreateWithoutRelationsInput'
    connect: 'GroupWhereUniqueInput'


class GroupCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GroupCreateWithoutRelationsInput', List['GroupCreateWithoutRelationsInput']]
    connect: Union['GroupWhereUniqueInput', List['GroupWhereUniqueInput']]


_GroupWhereUnique_id_Input = TypedDict(
    '_GroupWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

GroupWhereUniqueInput = _GroupWhereUnique_id_Input


class GroupUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    sql_where: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]
    GroupUserRole: 'GroupUserRoleUpdateManyWithoutRelationsInput'


class GroupUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    sql_where: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class GroupUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GroupCreateWithoutRelationsInput']
    connect: List['GroupWhereUniqueInput']
    set: List['GroupWhereUniqueInput']
    disconnect: List['GroupWhereUniqueInput']
    delete: List['GroupWhereUniqueInput']

    # TODO
    # update: List['GroupUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GroupUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GroupScalarWhereInput']
    # upsert: List['GroupUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['GroupCreateOrConnectWithoutRelationsInput']


class GroupUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GroupCreateWithoutRelationsInput'
    connect: 'GroupWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GroupUpdateInput'
    # upsert: 'GroupUpsertWithoutRelationsInput'
    # connectOrCreate: 'GroupCreateOrConnectWithoutRelationsInput'


class GroupUpsertInput(TypedDict):
    create: 'GroupCreateInput'
    update: 'GroupUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Group_id_OrderByInput = TypedDict(
    '_Group_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Group_name_OrderByInput = TypedDict(
    '_Group_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Group_sql_where_OrderByInput = TypedDict(
    '_Group_sql_where_OrderByInput',
    {
        'sql_where': 'SortOrder',
    },
    total=True
)

_Group_created_at_OrderByInput = TypedDict(
    '_Group_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Group_updated_at_OrderByInput = TypedDict(
    '_Group_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

GroupOrderByInput = Union[
    '_Group_id_OrderByInput',
    '_Group_name_OrderByInput',
    '_Group_sql_where_OrderByInput',
    '_Group_created_at_OrderByInput',
    '_Group_updated_at_OrderByInput',
]



# recursive Group types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GroupRelationFilter = TypedDict(
    'GroupRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GroupListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GroupInclude(TypedDict, total=False):
    """Group relational arguments"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroup']


    

class UserIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromGroupRecursive1']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupRecursive1']
    Note: Union[bool, 'FindManyNoteArgsFromGroupRecursive1']


class UserIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromGroupRecursive2']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupRecursive2']
    Note: Union[bool, 'FindManyNoteArgsFromGroupRecursive2']


class UserIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromGroupRecursive3']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupRecursive3']
    Note: Union[bool, 'FindManyNoteArgsFromGroupRecursive3']


class UserIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromGroupRecursive4']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupRecursive4']
    Note: Union[bool, 'FindManyNoteArgsFromGroupRecursive4']


class UserIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class UserArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyUserArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AuthChallengeIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive1']


class AuthChallengeIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive2']


class AuthChallengeIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive3']


class AuthChallengeIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive4']


class AuthChallengeIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class AuthChallengeArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class AuthChallengeArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class AuthChallengeArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class AuthChallengeArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class AuthChallengeArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyAuthChallengeArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class FindManyAuthChallengeArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class FindManyAuthChallengeArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class FindManyAuthChallengeArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class FindManyAuthChallengeArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    
    

class SubjectIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    Issue: Union[bool, 'FindManyIssueArgsFromGroupRecursive1']


class SubjectIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    Issue: Union[bool, 'FindManyIssueArgsFromGroupRecursive2']


class SubjectIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    Issue: Union[bool, 'FindManyIssueArgsFromGroupRecursive3']


class SubjectIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    Issue: Union[bool, 'FindManyIssueArgsFromGroupRecursive4']


class SubjectIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class SubjectArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'SubjectIncludeFromSubjectRecursive1'


class SubjectArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'SubjectIncludeFromSubjectRecursive2'


class SubjectArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'SubjectIncludeFromSubjectRecursive3'


class SubjectArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'SubjectIncludeFromSubjectRecursive4'


class SubjectArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManySubjectArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive1'


class FindManySubjectArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive2'


class FindManySubjectArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive3'


class FindManySubjectArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive4'


class FindManySubjectArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    
    

class GroupIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupRecursive1']


class GroupIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupRecursive2']


class GroupIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupRecursive3']


class GroupIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupRecursive4']


class GroupIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class GroupArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyGroupArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class GroupUserRoleIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    group: Union[bool, 'GroupArgsFromGroupRecursive1']
    User: Union[bool, 'UserArgsFromGroupRecursive1']


class GroupUserRoleIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    group: Union[bool, 'GroupArgsFromGroupRecursive2']
    User: Union[bool, 'UserArgsFromGroupRecursive2']


class GroupUserRoleIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    group: Union[bool, 'GroupArgsFromGroupRecursive3']
    User: Union[bool, 'UserArgsFromGroupRecursive3']


class GroupUserRoleIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    group: Union[bool, 'GroupArgsFromGroupRecursive4']
    User: Union[bool, 'UserArgsFromGroupRecursive4']


class GroupUserRoleIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class GroupUserRoleArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class GroupUserRoleArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class GroupUserRoleArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class GroupUserRoleArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class GroupUserRoleArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyGroupUserRoleArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class FindManyGroupUserRoleArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class FindManyGroupUserRoleArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class FindManyGroupUserRoleArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class FindManyGroupUserRoleArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    
    

class NoteIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive1']


class NoteIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive2']


class NoteIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive3']


class NoteIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    user: Union[bool, 'UserArgsFromGroupRecursive4']


class NoteIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class NoteArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyNoteArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class IssueIncludeFromGroup(TypedDict, total=False):
    """Relational arguments for Group"""
    subject: Union[bool, 'SubjectArgsFromGroupRecursive1']


class IssueIncludeFromGroupRecursive1(TypedDict, total=False):
    """Relational arguments for Group"""
    subject: Union[bool, 'SubjectArgsFromGroupRecursive2']


class IssueIncludeFromGroupRecursive2(TypedDict, total=False):
    """Relational arguments for Group"""
    subject: Union[bool, 'SubjectArgsFromGroupRecursive3']


class IssueIncludeFromGroupRecursive3(TypedDict, total=False):
    """Relational arguments for Group"""
    subject: Union[bool, 'SubjectArgsFromGroupRecursive4']


class IssueIncludeFromGroupRecursive4(TypedDict, total=False):
    """Relational arguments for Group"""

    

class IssueArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    include: 'IssueIncludeFromIssueRecursive1'


class IssueArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    include: 'IssueIncludeFromIssueRecursive2'


class IssueArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    include: 'IssueIncludeFromIssueRecursive3'


class IssueArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    include: 'IssueIncludeFromIssueRecursive4'


class IssueArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    
    

class FindManyIssueArgsFromGroup(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive1'


class FindManyIssueArgsFromGroupRecursive1(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive2'


class FindManyIssueArgsFromGroupRecursive2(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive3'


class FindManyIssueArgsFromGroupRecursive3(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive4'


class FindManyIssueArgsFromGroupRecursive4(TypedDict, total=False):
    """Arguments for Group"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    


FindManyGroupArgs = FindManyGroupArgsFromGroup
FindFirstGroupArgs = FindManyGroupArgsFromGroup


    

class GroupWhereInput(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    sql_where: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    GroupUserRole: 'GroupUserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['GroupWhereInputRecursive1', List['GroupWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GroupWhereInputRecursive1']
    OR: List['GroupWhereInputRecursive1']
    NOT: List['GroupWhereInputRecursive1']


class GroupWhereInputRecursive1(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    sql_where: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    GroupUserRole: 'GroupUserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['GroupWhereInputRecursive2', List['GroupWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GroupWhereInputRecursive2']
    OR: List['GroupWhereInputRecursive2']
    NOT: List['GroupWhereInputRecursive2']


class GroupWhereInputRecursive2(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    sql_where: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    GroupUserRole: 'GroupUserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['GroupWhereInputRecursive3', List['GroupWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GroupWhereInputRecursive3']
    OR: List['GroupWhereInputRecursive3']
    NOT: List['GroupWhereInputRecursive3']


class GroupWhereInputRecursive3(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    sql_where: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    GroupUserRole: 'GroupUserRoleListRelationFilter'

    # should be noted that AND and NOT should be Union['GroupWhereInputRecursive4', List['GroupWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GroupWhereInputRecursive4']
    OR: List['GroupWhereInputRecursive4']
    NOT: List['GroupWhereInputRecursive4']


class GroupWhereInputRecursive4(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    sql_where: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']
    GroupUserRole: 'GroupUserRoleListRelationFilter'



# aggregate Group types


    

class GroupScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    sql_where: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupScalarWhereWithAggregatesInputRecursive1']
    OR: List['GroupScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GroupScalarWhereWithAggregatesInputRecursive1']


class GroupScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    sql_where: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupScalarWhereWithAggregatesInputRecursive2']
    OR: List['GroupScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GroupScalarWhereWithAggregatesInputRecursive2']


class GroupScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    sql_where: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupScalarWhereWithAggregatesInputRecursive3']
    OR: List['GroupScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GroupScalarWhereWithAggregatesInputRecursive3']


class GroupScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    sql_where: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupScalarWhereWithAggregatesInputRecursive4']
    OR: List['GroupScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GroupScalarWhereWithAggregatesInputRecursive4']


class GroupScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Group arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    sql_where: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class GroupGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    sql_where: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'GroupSumAggregateOutput'
    _avg: 'GroupAvgAggregateOutput'
    _min: 'GroupMinAggregateOutput'
    _max: 'GroupMaxAggregateOutput'
    _count: 'GroupCountAggregateOutput'


class GroupAvgAggregateOutput(TypedDict, total=False):
    """Group output for aggregating averages"""


class GroupSumAggregateOutput(TypedDict, total=False):
    """Group output for aggregating sums"""


class GroupScalarAggregateOutput(TypedDict, total=False):
    """Group output including scalar fields"""
    id: _str
    name: _str
    sql_where: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


GroupMinAggregateOutput = GroupScalarAggregateOutput
GroupMaxAggregateOutput = GroupScalarAggregateOutput


class GroupMaxAggregateInput(TypedDict, total=False):
    """Group input for aggregating by max"""
    id: bool
    name: bool
    sql_where: bool
    created_at: bool
    updated_at: bool


class GroupMinAggregateInput(TypedDict, total=False):
    """Group input for aggregating by min"""
    id: bool
    name: bool
    sql_where: bool
    created_at: bool
    updated_at: bool


class GroupNumberAggregateInput(TypedDict, total=False):
    """Group input for aggregating numbers"""


GroupAvgAggregateInput = GroupNumberAggregateInput
GroupSumAggregateInput = GroupNumberAggregateInput


GroupCountAggregateInput = TypedDict(
    'GroupCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'sql_where': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

GroupCountAggregateOutput = TypedDict(
    'GroupCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'sql_where': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


GroupKeys = Literal[
    'id',
    'name',
    'sql_where',
    'created_at',
    'updated_at',
    'GroupUserRole',
]
GroupScalarFieldKeys = Literal[
    'id',
    'name',
    'sql_where',
    'created_at',
    'updated_at',
]
GroupScalarFieldKeysT = TypeVar('GroupScalarFieldKeysT', bound=GroupScalarFieldKeys)

GroupRelationalFieldKeys = Literal[
        'GroupUserRole',
    ]

# GroupUserRole types

class GroupUserRoleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the GroupUserRole create method"""
    id: _str
    group_id: _str
    group: 'GroupCreateNestedWithoutRelationsInput'
    user_id: _str
    User: 'UserCreateNestedWithoutRelationsInput'
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class GroupUserRoleCreateInput(GroupUserRoleOptionalCreateInput):
    """Required arguments to the GroupUserRole create method"""
    role: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GroupUserRoleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the GroupUserRole create method, without relations"""
    id: _str
    group_id: _str
    user_id: _str
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class GroupUserRoleCreateWithoutRelationsInput(GroupUserRoleOptionalCreateWithoutRelationsInput):
    """Required arguments to the GroupUserRole create method, without relations"""
    role: _str


class GroupUserRoleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GroupUserRoleCreateWithoutRelationsInput'
    connect: 'GroupUserRoleWhereUniqueInput'


class GroupUserRoleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GroupUserRoleCreateWithoutRelationsInput', List['GroupUserRoleCreateWithoutRelationsInput']]
    connect: Union['GroupUserRoleWhereUniqueInput', List['GroupUserRoleWhereUniqueInput']]


_GroupUserRoleWhereUnique_id_Input = TypedDict(
    '_GroupUserRoleWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

GroupUserRoleWhereUniqueInput = _GroupUserRoleWhereUnique_id_Input


class GroupUserRoleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    group: 'GroupUpdateOneWithoutRelationsInput'
    User: 'UserUpdateOneWithoutRelationsInput'
    role: _str
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class GroupUserRoleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: _str
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class GroupUserRoleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GroupUserRoleCreateWithoutRelationsInput']
    connect: List['GroupUserRoleWhereUniqueInput']
    set: List['GroupUserRoleWhereUniqueInput']
    disconnect: List['GroupUserRoleWhereUniqueInput']
    delete: List['GroupUserRoleWhereUniqueInput']

    # TODO
    # update: List['GroupUserRoleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GroupUserRoleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GroupUserRoleScalarWhereInput']
    # upsert: List['GroupUserRoleUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['GroupUserRoleCreateOrConnectWithoutRelationsInput']


class GroupUserRoleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GroupUserRoleCreateWithoutRelationsInput'
    connect: 'GroupUserRoleWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GroupUserRoleUpdateInput'
    # upsert: 'GroupUserRoleUpsertWithoutRelationsInput'
    # connectOrCreate: 'GroupUserRoleCreateOrConnectWithoutRelationsInput'


class GroupUserRoleUpsertInput(TypedDict):
    create: 'GroupUserRoleCreateInput'
    update: 'GroupUserRoleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_GroupUserRole_id_OrderByInput = TypedDict(
    '_GroupUserRole_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_GroupUserRole_group_id_OrderByInput = TypedDict(
    '_GroupUserRole_group_id_OrderByInput',
    {
        'group_id': 'SortOrder',
    },
    total=True
)

_GroupUserRole_user_id_OrderByInput = TypedDict(
    '_GroupUserRole_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_GroupUserRole_role_OrderByInput = TypedDict(
    '_GroupUserRole_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_GroupUserRole_created_at_OrderByInput = TypedDict(
    '_GroupUserRole_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_GroupUserRole_updated_at_OrderByInput = TypedDict(
    '_GroupUserRole_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

GroupUserRoleOrderByInput = Union[
    '_GroupUserRole_id_OrderByInput',
    '_GroupUserRole_group_id_OrderByInput',
    '_GroupUserRole_user_id_OrderByInput',
    '_GroupUserRole_role_OrderByInput',
    '_GroupUserRole_created_at_OrderByInput',
    '_GroupUserRole_updated_at_OrderByInput',
]



# recursive GroupUserRole types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GroupUserRoleRelationFilter = TypedDict(
    'GroupUserRoleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GroupUserRoleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GroupUserRoleInclude(TypedDict, total=False):
    """GroupUserRole relational arguments"""
    group: Union[bool, 'GroupArgsFromGroupUserRole']
    User: Union[bool, 'UserArgsFromGroupUserRole']


    

class UserIncludeFromGroupUserRole(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromGroupUserRoleRecursive1']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupUserRoleRecursive1']
    Note: Union[bool, 'FindManyNoteArgsFromGroupUserRoleRecursive1']


class UserIncludeFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromGroupUserRoleRecursive2']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupUserRoleRecursive2']
    Note: Union[bool, 'FindManyNoteArgsFromGroupUserRoleRecursive2']


class UserIncludeFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromGroupUserRoleRecursive3']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupUserRoleRecursive3']
    Note: Union[bool, 'FindManyNoteArgsFromGroupUserRoleRecursive3']


class UserIncludeFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromGroupUserRoleRecursive4']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupUserRoleRecursive4']
    Note: Union[bool, 'FindManyNoteArgsFromGroupUserRoleRecursive4']


class UserIncludeFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""

    

class UserArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    
    

class FindManyUserArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AuthChallengeIncludeFromGroupUserRole(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    user: Union[bool, 'UserArgsFromGroupUserRoleRecursive1']


class AuthChallengeIncludeFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    user: Union[bool, 'UserArgsFromGroupUserRoleRecursive2']


class AuthChallengeIncludeFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    user: Union[bool, 'UserArgsFromGroupUserRoleRecursive3']


class AuthChallengeIncludeFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    user: Union[bool, 'UserArgsFromGroupUserRoleRecursive4']


class AuthChallengeIncludeFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""

    

class AuthChallengeArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class AuthChallengeArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class AuthChallengeArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class AuthChallengeArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class AuthChallengeArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    
    

class FindManyAuthChallengeArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class FindManyAuthChallengeArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class FindManyAuthChallengeArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class FindManyAuthChallengeArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class FindManyAuthChallengeArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    
    

class SubjectIncludeFromGroupUserRole(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    Issue: Union[bool, 'FindManyIssueArgsFromGroupUserRoleRecursive1']


class SubjectIncludeFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    Issue: Union[bool, 'FindManyIssueArgsFromGroupUserRoleRecursive2']


class SubjectIncludeFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    Issue: Union[bool, 'FindManyIssueArgsFromGroupUserRoleRecursive3']


class SubjectIncludeFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    Issue: Union[bool, 'FindManyIssueArgsFromGroupUserRoleRecursive4']


class SubjectIncludeFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""

    

class SubjectArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'SubjectIncludeFromSubjectRecursive1'


class SubjectArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'SubjectIncludeFromSubjectRecursive2'


class SubjectArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'SubjectIncludeFromSubjectRecursive3'


class SubjectArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'SubjectIncludeFromSubjectRecursive4'


class SubjectArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    
    

class FindManySubjectArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive1'


class FindManySubjectArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive2'


class FindManySubjectArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive3'


class FindManySubjectArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive4'


class FindManySubjectArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    
    

class GroupIncludeFromGroupUserRole(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupUserRoleRecursive1']


class GroupIncludeFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupUserRoleRecursive2']


class GroupIncludeFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupUserRoleRecursive3']


class GroupIncludeFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromGroupUserRoleRecursive4']


class GroupIncludeFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""

    

class GroupArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    
    

class FindManyGroupArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class GroupUserRoleIncludeFromGroupUserRole(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    group: Union[bool, 'GroupArgsFromGroupUserRoleRecursive1']
    User: Union[bool, 'UserArgsFromGroupUserRoleRecursive1']


class GroupUserRoleIncludeFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    group: Union[bool, 'GroupArgsFromGroupUserRoleRecursive2']
    User: Union[bool, 'UserArgsFromGroupUserRoleRecursive2']


class GroupUserRoleIncludeFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    group: Union[bool, 'GroupArgsFromGroupUserRoleRecursive3']
    User: Union[bool, 'UserArgsFromGroupUserRoleRecursive3']


class GroupUserRoleIncludeFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    group: Union[bool, 'GroupArgsFromGroupUserRoleRecursive4']
    User: Union[bool, 'UserArgsFromGroupUserRoleRecursive4']


class GroupUserRoleIncludeFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""

    

class GroupUserRoleArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class GroupUserRoleArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class GroupUserRoleArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class GroupUserRoleArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class GroupUserRoleArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    
    

class FindManyGroupUserRoleArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class FindManyGroupUserRoleArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class FindManyGroupUserRoleArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class FindManyGroupUserRoleArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class FindManyGroupUserRoleArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    
    

class NoteIncludeFromGroupUserRole(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    user: Union[bool, 'UserArgsFromGroupUserRoleRecursive1']


class NoteIncludeFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    user: Union[bool, 'UserArgsFromGroupUserRoleRecursive2']


class NoteIncludeFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    user: Union[bool, 'UserArgsFromGroupUserRoleRecursive3']


class NoteIncludeFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    user: Union[bool, 'UserArgsFromGroupUserRoleRecursive4']


class NoteIncludeFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""

    

class NoteArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    
    

class FindManyNoteArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class IssueIncludeFromGroupUserRole(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    subject: Union[bool, 'SubjectArgsFromGroupUserRoleRecursive1']


class IssueIncludeFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    subject: Union[bool, 'SubjectArgsFromGroupUserRoleRecursive2']


class IssueIncludeFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    subject: Union[bool, 'SubjectArgsFromGroupUserRoleRecursive3']


class IssueIncludeFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""
    subject: Union[bool, 'SubjectArgsFromGroupUserRoleRecursive4']


class IssueIncludeFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Relational arguments for GroupUserRole"""

    

class IssueArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'IssueIncludeFromIssueRecursive1'


class IssueArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'IssueIncludeFromIssueRecursive2'


class IssueArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'IssueIncludeFromIssueRecursive3'


class IssueArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    include: 'IssueIncludeFromIssueRecursive4'


class IssueArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    
    

class FindManyIssueArgsFromGroupUserRole(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive1'


class FindManyIssueArgsFromGroupUserRoleRecursive1(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive2'


class FindManyIssueArgsFromGroupUserRoleRecursive2(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive3'


class FindManyIssueArgsFromGroupUserRoleRecursive3(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive4'


class FindManyIssueArgsFromGroupUserRoleRecursive4(TypedDict, total=False):
    """Arguments for GroupUserRole"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    


FindManyGroupUserRoleArgs = FindManyGroupUserRoleArgsFromGroupUserRole
FindFirstGroupUserRoleArgs = FindManyGroupUserRoleArgsFromGroupUserRole


    

class GroupUserRoleWhereInput(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    group_id: Union[_str, 'types.StringFilter']
    group: 'GroupRelationFilter'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    role: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GroupUserRoleWhereInputRecursive1', List['GroupUserRoleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GroupUserRoleWhereInputRecursive1']
    OR: List['GroupUserRoleWhereInputRecursive1']
    NOT: List['GroupUserRoleWhereInputRecursive1']


class GroupUserRoleWhereInputRecursive1(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    group_id: Union[_str, 'types.StringFilter']
    group: 'GroupRelationFilter'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    role: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GroupUserRoleWhereInputRecursive2', List['GroupUserRoleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GroupUserRoleWhereInputRecursive2']
    OR: List['GroupUserRoleWhereInputRecursive2']
    NOT: List['GroupUserRoleWhereInputRecursive2']


class GroupUserRoleWhereInputRecursive2(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    group_id: Union[_str, 'types.StringFilter']
    group: 'GroupRelationFilter'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    role: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GroupUserRoleWhereInputRecursive3', List['GroupUserRoleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GroupUserRoleWhereInputRecursive3']
    OR: List['GroupUserRoleWhereInputRecursive3']
    NOT: List['GroupUserRoleWhereInputRecursive3']


class GroupUserRoleWhereInputRecursive3(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    group_id: Union[_str, 'types.StringFilter']
    group: 'GroupRelationFilter'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    role: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['GroupUserRoleWhereInputRecursive4', List['GroupUserRoleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GroupUserRoleWhereInputRecursive4']
    OR: List['GroupUserRoleWhereInputRecursive4']
    NOT: List['GroupUserRoleWhereInputRecursive4']


class GroupUserRoleWhereInputRecursive4(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    group_id: Union[_str, 'types.StringFilter']
    group: 'GroupRelationFilter'
    user_id: Union[_str, 'types.StringFilter']
    User: 'UserRelationFilter'
    role: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']



# aggregate GroupUserRole types


    

class GroupUserRoleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    group_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive1']
    OR: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive1']


class GroupUserRoleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    group_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive2']
    OR: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive2']


class GroupUserRoleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    group_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive3']
    OR: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive3']


class GroupUserRoleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    group_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive4']
    OR: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GroupUserRoleScalarWhereWithAggregatesInputRecursive4']


class GroupUserRoleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """GroupUserRole arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    group_id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    role: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class GroupUserRoleGroupByOutput(TypedDict, total=False):
    id: _str
    group_id: _str
    user_id: _str
    role: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'GroupUserRoleSumAggregateOutput'
    _avg: 'GroupUserRoleAvgAggregateOutput'
    _min: 'GroupUserRoleMinAggregateOutput'
    _max: 'GroupUserRoleMaxAggregateOutput'
    _count: 'GroupUserRoleCountAggregateOutput'


class GroupUserRoleAvgAggregateOutput(TypedDict, total=False):
    """GroupUserRole output for aggregating averages"""


class GroupUserRoleSumAggregateOutput(TypedDict, total=False):
    """GroupUserRole output for aggregating sums"""


class GroupUserRoleScalarAggregateOutput(TypedDict, total=False):
    """GroupUserRole output including scalar fields"""
    id: _str
    group_id: _str
    user_id: _str
    role: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


GroupUserRoleMinAggregateOutput = GroupUserRoleScalarAggregateOutput
GroupUserRoleMaxAggregateOutput = GroupUserRoleScalarAggregateOutput


class GroupUserRoleMaxAggregateInput(TypedDict, total=False):
    """GroupUserRole input for aggregating by max"""
    id: bool
    group_id: bool
    user_id: bool
    role: bool
    created_at: bool
    updated_at: bool


class GroupUserRoleMinAggregateInput(TypedDict, total=False):
    """GroupUserRole input for aggregating by min"""
    id: bool
    group_id: bool
    user_id: bool
    role: bool
    created_at: bool
    updated_at: bool


class GroupUserRoleNumberAggregateInput(TypedDict, total=False):
    """GroupUserRole input for aggregating numbers"""


GroupUserRoleAvgAggregateInput = GroupUserRoleNumberAggregateInput
GroupUserRoleSumAggregateInput = GroupUserRoleNumberAggregateInput


GroupUserRoleCountAggregateInput = TypedDict(
    'GroupUserRoleCountAggregateInput',
    {
        'id': bool,
        'group_id': bool,
        'user_id': bool,
        'role': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

GroupUserRoleCountAggregateOutput = TypedDict(
    'GroupUserRoleCountAggregateOutput',
    {
        'id': int,
        'group_id': int,
        'user_id': int,
        'role': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


GroupUserRoleKeys = Literal[
    'id',
    'group_id',
    'group',
    'user_id',
    'User',
    'role',
    'created_at',
    'updated_at',
]
GroupUserRoleScalarFieldKeys = Literal[
    'id',
    'group_id',
    'user_id',
    'role',
    'created_at',
    'updated_at',
]
GroupUserRoleScalarFieldKeysT = TypeVar('GroupUserRoleScalarFieldKeysT', bound=GroupUserRoleScalarFieldKeys)

GroupUserRoleRelationalFieldKeys = Literal[
        'group',
        'User',
    ]

# Note types

class NoteOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Note create method"""
    id: _str
    user_id: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    content: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class NoteCreateInput(NoteOptionalCreateInput):
    """Required arguments to the Note create method"""
    entity_id: _str
    entity_type: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class NoteOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Note create method, without relations"""
    id: _str
    user_id: _str
    content: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class NoteCreateWithoutRelationsInput(NoteOptionalCreateWithoutRelationsInput):
    """Required arguments to the Note create method, without relations"""
    entity_id: _str
    entity_type: _str


class NoteCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'NoteCreateWithoutRelationsInput'
    connect: 'NoteWhereUniqueInput'


class NoteCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['NoteCreateWithoutRelationsInput', List['NoteCreateWithoutRelationsInput']]
    connect: Union['NoteWhereUniqueInput', List['NoteWhereUniqueInput']]


_NoteWhereUnique_id_Input = TypedDict(
    '_NoteWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

NoteWhereUniqueInput = _NoteWhereUnique_id_Input


class NoteUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    entity_id: _str
    entity_type: _str
    content: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class NoteUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    entity_id: _str
    entity_type: _str
    content: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class NoteUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['NoteCreateWithoutRelationsInput']
    connect: List['NoteWhereUniqueInput']
    set: List['NoteWhereUniqueInput']
    disconnect: List['NoteWhereUniqueInput']
    delete: List['NoteWhereUniqueInput']

    # TODO
    # update: List['NoteUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['NoteUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['NoteScalarWhereInput']
    # upsert: List['NoteUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['NoteCreateOrConnectWithoutRelationsInput']


class NoteUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'NoteCreateWithoutRelationsInput'
    connect: 'NoteWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'NoteUpdateInput'
    # upsert: 'NoteUpsertWithoutRelationsInput'
    # connectOrCreate: 'NoteCreateOrConnectWithoutRelationsInput'


class NoteUpsertInput(TypedDict):
    create: 'NoteCreateInput'
    update: 'NoteUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Note_id_OrderByInput = TypedDict(
    '_Note_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Note_user_id_OrderByInput = TypedDict(
    '_Note_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Note_entity_id_OrderByInput = TypedDict(
    '_Note_entity_id_OrderByInput',
    {
        'entity_id': 'SortOrder',
    },
    total=True
)

_Note_entity_type_OrderByInput = TypedDict(
    '_Note_entity_type_OrderByInput',
    {
        'entity_type': 'SortOrder',
    },
    total=True
)

_Note_content_OrderByInput = TypedDict(
    '_Note_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Note_created_at_OrderByInput = TypedDict(
    '_Note_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Note_updated_at_OrderByInput = TypedDict(
    '_Note_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

NoteOrderByInput = Union[
    '_Note_id_OrderByInput',
    '_Note_user_id_OrderByInput',
    '_Note_entity_id_OrderByInput',
    '_Note_entity_type_OrderByInput',
    '_Note_content_OrderByInput',
    '_Note_created_at_OrderByInput',
    '_Note_updated_at_OrderByInput',
]



# recursive Note types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

NoteRelationFilter = TypedDict(
    'NoteRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class NoteListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class NoteInclude(TypedDict, total=False):
    """Note relational arguments"""
    user: Union[bool, 'UserArgsFromNote']


    

class UserIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromNoteRecursive1']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromNoteRecursive1']
    Note: Union[bool, 'FindManyNoteArgsFromNoteRecursive1']


class UserIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromNoteRecursive2']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromNoteRecursive2']
    Note: Union[bool, 'FindManyNoteArgsFromNoteRecursive2']


class UserIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromNoteRecursive3']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromNoteRecursive3']
    Note: Union[bool, 'FindManyNoteArgsFromNoteRecursive3']


class UserIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromNoteRecursive4']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromNoteRecursive4']
    Note: Union[bool, 'FindManyNoteArgsFromNoteRecursive4']


class UserIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class UserArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyUserArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AuthChallengeIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""
    user: Union[bool, 'UserArgsFromNoteRecursive1']


class AuthChallengeIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""
    user: Union[bool, 'UserArgsFromNoteRecursive2']


class AuthChallengeIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""
    user: Union[bool, 'UserArgsFromNoteRecursive3']


class AuthChallengeIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""
    user: Union[bool, 'UserArgsFromNoteRecursive4']


class AuthChallengeIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class AuthChallengeArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class AuthChallengeArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class AuthChallengeArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class AuthChallengeArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class AuthChallengeArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyAuthChallengeArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class FindManyAuthChallengeArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class FindManyAuthChallengeArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class FindManyAuthChallengeArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class FindManyAuthChallengeArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    
    

class SubjectIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""
    Issue: Union[bool, 'FindManyIssueArgsFromNoteRecursive1']


class SubjectIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""
    Issue: Union[bool, 'FindManyIssueArgsFromNoteRecursive2']


class SubjectIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""
    Issue: Union[bool, 'FindManyIssueArgsFromNoteRecursive3']


class SubjectIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""
    Issue: Union[bool, 'FindManyIssueArgsFromNoteRecursive4']


class SubjectIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class SubjectArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'SubjectIncludeFromSubjectRecursive1'


class SubjectArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'SubjectIncludeFromSubjectRecursive2'


class SubjectArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'SubjectIncludeFromSubjectRecursive3'


class SubjectArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'SubjectIncludeFromSubjectRecursive4'


class SubjectArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManySubjectArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive1'


class FindManySubjectArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive2'


class FindManySubjectArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive3'


class FindManySubjectArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive4'


class FindManySubjectArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    
    

class GroupIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromNoteRecursive1']


class GroupIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromNoteRecursive2']


class GroupIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromNoteRecursive3']


class GroupIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromNoteRecursive4']


class GroupIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class GroupArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyGroupArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class GroupUserRoleIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""
    group: Union[bool, 'GroupArgsFromNoteRecursive1']
    User: Union[bool, 'UserArgsFromNoteRecursive1']


class GroupUserRoleIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""
    group: Union[bool, 'GroupArgsFromNoteRecursive2']
    User: Union[bool, 'UserArgsFromNoteRecursive2']


class GroupUserRoleIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""
    group: Union[bool, 'GroupArgsFromNoteRecursive3']
    User: Union[bool, 'UserArgsFromNoteRecursive3']


class GroupUserRoleIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""
    group: Union[bool, 'GroupArgsFromNoteRecursive4']
    User: Union[bool, 'UserArgsFromNoteRecursive4']


class GroupUserRoleIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class GroupUserRoleArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class GroupUserRoleArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class GroupUserRoleArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class GroupUserRoleArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class GroupUserRoleArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyGroupUserRoleArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class FindManyGroupUserRoleArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class FindManyGroupUserRoleArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class FindManyGroupUserRoleArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class FindManyGroupUserRoleArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    
    

class NoteIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""
    user: Union[bool, 'UserArgsFromNoteRecursive1']


class NoteIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""
    user: Union[bool, 'UserArgsFromNoteRecursive2']


class NoteIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""
    user: Union[bool, 'UserArgsFromNoteRecursive3']


class NoteIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""
    user: Union[bool, 'UserArgsFromNoteRecursive4']


class NoteIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class NoteArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyNoteArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class IssueIncludeFromNote(TypedDict, total=False):
    """Relational arguments for Note"""
    subject: Union[bool, 'SubjectArgsFromNoteRecursive1']


class IssueIncludeFromNoteRecursive1(TypedDict, total=False):
    """Relational arguments for Note"""
    subject: Union[bool, 'SubjectArgsFromNoteRecursive2']


class IssueIncludeFromNoteRecursive2(TypedDict, total=False):
    """Relational arguments for Note"""
    subject: Union[bool, 'SubjectArgsFromNoteRecursive3']


class IssueIncludeFromNoteRecursive3(TypedDict, total=False):
    """Relational arguments for Note"""
    subject: Union[bool, 'SubjectArgsFromNoteRecursive4']


class IssueIncludeFromNoteRecursive4(TypedDict, total=False):
    """Relational arguments for Note"""

    

class IssueArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    include: 'IssueIncludeFromIssueRecursive1'


class IssueArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    include: 'IssueIncludeFromIssueRecursive2'


class IssueArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    include: 'IssueIncludeFromIssueRecursive3'


class IssueArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    include: 'IssueIncludeFromIssueRecursive4'


class IssueArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    
    

class FindManyIssueArgsFromNote(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive1'


class FindManyIssueArgsFromNoteRecursive1(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive2'


class FindManyIssueArgsFromNoteRecursive2(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive3'


class FindManyIssueArgsFromNoteRecursive3(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive4'


class FindManyIssueArgsFromNoteRecursive4(TypedDict, total=False):
    """Arguments for Note"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    


FindManyNoteArgs = FindManyNoteArgsFromNote
FindFirstNoteArgs = FindManyNoteArgsFromNote


    

class NoteWhereInput(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    entity_id: Union[_str, 'types.StringFilter']
    entity_type: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['NoteWhereInputRecursive1', List['NoteWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['NoteWhereInputRecursive1']
    OR: List['NoteWhereInputRecursive1']
    NOT: List['NoteWhereInputRecursive1']


class NoteWhereInputRecursive1(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    entity_id: Union[_str, 'types.StringFilter']
    entity_type: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['NoteWhereInputRecursive2', List['NoteWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['NoteWhereInputRecursive2']
    OR: List['NoteWhereInputRecursive2']
    NOT: List['NoteWhereInputRecursive2']


class NoteWhereInputRecursive2(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    entity_id: Union[_str, 'types.StringFilter']
    entity_type: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['NoteWhereInputRecursive3', List['NoteWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['NoteWhereInputRecursive3']
    OR: List['NoteWhereInputRecursive3']
    NOT: List['NoteWhereInputRecursive3']


class NoteWhereInputRecursive3(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    entity_id: Union[_str, 'types.StringFilter']
    entity_type: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['NoteWhereInputRecursive4', List['NoteWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['NoteWhereInputRecursive4']
    OR: List['NoteWhereInputRecursive4']
    NOT: List['NoteWhereInputRecursive4']


class NoteWhereInputRecursive4(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user_id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    entity_id: Union[_str, 'types.StringFilter']
    entity_type: Union[_str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']



# aggregate Note types


    

class NoteScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_type: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NoteScalarWhereWithAggregatesInputRecursive1']
    OR: List['NoteScalarWhereWithAggregatesInputRecursive1']
    NOT: List['NoteScalarWhereWithAggregatesInputRecursive1']


class NoteScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_type: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NoteScalarWhereWithAggregatesInputRecursive2']
    OR: List['NoteScalarWhereWithAggregatesInputRecursive2']
    NOT: List['NoteScalarWhereWithAggregatesInputRecursive2']


class NoteScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_type: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NoteScalarWhereWithAggregatesInputRecursive3']
    OR: List['NoteScalarWhereWithAggregatesInputRecursive3']
    NOT: List['NoteScalarWhereWithAggregatesInputRecursive3']


class NoteScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_type: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NoteScalarWhereWithAggregatesInputRecursive4']
    OR: List['NoteScalarWhereWithAggregatesInputRecursive4']
    NOT: List['NoteScalarWhereWithAggregatesInputRecursive4']


class NoteScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Note arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_id: Union[_str, 'types.StringWithAggregatesFilter']
    entity_type: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class NoteGroupByOutput(TypedDict, total=False):
    id: _str
    user_id: _str
    entity_id: _str
    entity_type: _str
    content: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'NoteSumAggregateOutput'
    _avg: 'NoteAvgAggregateOutput'
    _min: 'NoteMinAggregateOutput'
    _max: 'NoteMaxAggregateOutput'
    _count: 'NoteCountAggregateOutput'


class NoteAvgAggregateOutput(TypedDict, total=False):
    """Note output for aggregating averages"""


class NoteSumAggregateOutput(TypedDict, total=False):
    """Note output for aggregating sums"""


class NoteScalarAggregateOutput(TypedDict, total=False):
    """Note output including scalar fields"""
    id: _str
    user_id: _str
    entity_id: _str
    entity_type: _str
    content: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


NoteMinAggregateOutput = NoteScalarAggregateOutput
NoteMaxAggregateOutput = NoteScalarAggregateOutput


class NoteMaxAggregateInput(TypedDict, total=False):
    """Note input for aggregating by max"""
    id: bool
    user_id: bool
    entity_id: bool
    entity_type: bool
    content: bool
    created_at: bool
    updated_at: bool


class NoteMinAggregateInput(TypedDict, total=False):
    """Note input for aggregating by min"""
    id: bool
    user_id: bool
    entity_id: bool
    entity_type: bool
    content: bool
    created_at: bool
    updated_at: bool


class NoteNumberAggregateInput(TypedDict, total=False):
    """Note input for aggregating numbers"""


NoteAvgAggregateInput = NoteNumberAggregateInput
NoteSumAggregateInput = NoteNumberAggregateInput


NoteCountAggregateInput = TypedDict(
    'NoteCountAggregateInput',
    {
        'id': bool,
        'user_id': bool,
        'entity_id': bool,
        'entity_type': bool,
        'content': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

NoteCountAggregateOutput = TypedDict(
    'NoteCountAggregateOutput',
    {
        'id': int,
        'user_id': int,
        'entity_id': int,
        'entity_type': int,
        'content': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


NoteKeys = Literal[
    'id',
    'user_id',
    'user',
    'entity_id',
    'entity_type',
    'content',
    'created_at',
    'updated_at',
]
NoteScalarFieldKeys = Literal[
    'id',
    'user_id',
    'entity_id',
    'entity_type',
    'content',
    'created_at',
    'updated_at',
]
NoteScalarFieldKeysT = TypeVar('NoteScalarFieldKeysT', bound=NoteScalarFieldKeys)

NoteRelationalFieldKeys = Literal[
        'user',
    ]

# Issue types

class IssueOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Issue create method"""
    id: _str
    subject_id: _str
    subject: 'SubjectCreateNestedWithoutRelationsInput'
    title: Optional[_str]
    content: Optional[_str]
    status: Optional[_str]
    priority: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class IssueCreateInput(IssueOptionalCreateInput):
    """Required arguments to the Issue create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class IssueOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Issue create method, without relations"""
    id: _str
    subject_id: _str
    title: Optional[_str]
    content: Optional[_str]
    status: Optional[_str]
    priority: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class IssueCreateWithoutRelationsInput(IssueOptionalCreateWithoutRelationsInput):
    """Required arguments to the Issue create method, without relations"""


class IssueCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'IssueCreateWithoutRelationsInput'
    connect: 'IssueWhereUniqueInput'


class IssueCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['IssueCreateWithoutRelationsInput', List['IssueCreateWithoutRelationsInput']]
    connect: Union['IssueWhereUniqueInput', List['IssueWhereUniqueInput']]


_IssueWhereUnique_id_Input = TypedDict(
    '_IssueWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

IssueWhereUniqueInput = _IssueWhereUnique_id_Input


class IssueUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    subject: 'SubjectUpdateOneWithoutRelationsInput'
    title: Optional[_str]
    content: Optional[_str]
    status: Optional[_str]
    priority: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class IssueUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: Optional[_str]
    content: Optional[_str]
    status: Optional[_str]
    priority: Optional[_str]
    created_at: datetime.datetime
    updated_at: Optional[datetime.datetime]


class IssueUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['IssueCreateWithoutRelationsInput']
    connect: List['IssueWhereUniqueInput']
    set: List['IssueWhereUniqueInput']
    disconnect: List['IssueWhereUniqueInput']
    delete: List['IssueWhereUniqueInput']

    # TODO
    # update: List['IssueUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['IssueUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['IssueScalarWhereInput']
    # upsert: List['IssueUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['IssueCreateOrConnectWithoutRelationsInput']


class IssueUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'IssueCreateWithoutRelationsInput'
    connect: 'IssueWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'IssueUpdateInput'
    # upsert: 'IssueUpsertWithoutRelationsInput'
    # connectOrCreate: 'IssueCreateOrConnectWithoutRelationsInput'


class IssueUpsertInput(TypedDict):
    create: 'IssueCreateInput'
    update: 'IssueUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Issue_id_OrderByInput = TypedDict(
    '_Issue_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Issue_subject_id_OrderByInput = TypedDict(
    '_Issue_subject_id_OrderByInput',
    {
        'subject_id': 'SortOrder',
    },
    total=True
)

_Issue_title_OrderByInput = TypedDict(
    '_Issue_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Issue_content_OrderByInput = TypedDict(
    '_Issue_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Issue_status_OrderByInput = TypedDict(
    '_Issue_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Issue_priority_OrderByInput = TypedDict(
    '_Issue_priority_OrderByInput',
    {
        'priority': 'SortOrder',
    },
    total=True
)

_Issue_created_at_OrderByInput = TypedDict(
    '_Issue_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Issue_updated_at_OrderByInput = TypedDict(
    '_Issue_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

IssueOrderByInput = Union[
    '_Issue_id_OrderByInput',
    '_Issue_subject_id_OrderByInput',
    '_Issue_title_OrderByInput',
    '_Issue_content_OrderByInput',
    '_Issue_status_OrderByInput',
    '_Issue_priority_OrderByInput',
    '_Issue_created_at_OrderByInput',
    '_Issue_updated_at_OrderByInput',
]



# recursive Issue types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

IssueRelationFilter = TypedDict(
    'IssueRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class IssueListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class IssueInclude(TypedDict, total=False):
    """Issue relational arguments"""
    subject: Union[bool, 'SubjectArgsFromIssue']


    

class UserIncludeFromIssue(TypedDict, total=False):
    """Relational arguments for Issue"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromIssueRecursive1']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromIssueRecursive1']
    Note: Union[bool, 'FindManyNoteArgsFromIssueRecursive1']


class UserIncludeFromIssueRecursive1(TypedDict, total=False):
    """Relational arguments for Issue"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromIssueRecursive2']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromIssueRecursive2']
    Note: Union[bool, 'FindManyNoteArgsFromIssueRecursive2']


class UserIncludeFromIssueRecursive2(TypedDict, total=False):
    """Relational arguments for Issue"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromIssueRecursive3']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromIssueRecursive3']
    Note: Union[bool, 'FindManyNoteArgsFromIssueRecursive3']


class UserIncludeFromIssueRecursive3(TypedDict, total=False):
    """Relational arguments for Issue"""
    AuthChallenge: Union[bool, 'FindManyAuthChallengeArgsFromIssueRecursive4']
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromIssueRecursive4']
    Note: Union[bool, 'FindManyNoteArgsFromIssueRecursive4']


class UserIncludeFromIssueRecursive4(TypedDict, total=False):
    """Relational arguments for Issue"""

    

class UserArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    
    

class FindManyUserArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AuthChallengeIncludeFromIssue(TypedDict, total=False):
    """Relational arguments for Issue"""
    user: Union[bool, 'UserArgsFromIssueRecursive1']


class AuthChallengeIncludeFromIssueRecursive1(TypedDict, total=False):
    """Relational arguments for Issue"""
    user: Union[bool, 'UserArgsFromIssueRecursive2']


class AuthChallengeIncludeFromIssueRecursive2(TypedDict, total=False):
    """Relational arguments for Issue"""
    user: Union[bool, 'UserArgsFromIssueRecursive3']


class AuthChallengeIncludeFromIssueRecursive3(TypedDict, total=False):
    """Relational arguments for Issue"""
    user: Union[bool, 'UserArgsFromIssueRecursive4']


class AuthChallengeIncludeFromIssueRecursive4(TypedDict, total=False):
    """Relational arguments for Issue"""

    

class AuthChallengeArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class AuthChallengeArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class AuthChallengeArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class AuthChallengeArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class AuthChallengeArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    
    

class FindManyAuthChallengeArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive1'


class FindManyAuthChallengeArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive2'


class FindManyAuthChallengeArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive3'


class FindManyAuthChallengeArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    include: 'AuthChallengeIncludeFromAuthChallengeRecursive4'


class FindManyAuthChallengeArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['AuthChallengeOrderByInput', List['AuthChallengeOrderByInput']]
    where: 'AuthChallengeWhereInput'
    cursor: 'AuthChallengeWhereUniqueInput'
    distinct: List['AuthChallengeScalarFieldKeys']
    
    

class SubjectIncludeFromIssue(TypedDict, total=False):
    """Relational arguments for Issue"""
    Issue: Union[bool, 'FindManyIssueArgsFromIssueRecursive1']


class SubjectIncludeFromIssueRecursive1(TypedDict, total=False):
    """Relational arguments for Issue"""
    Issue: Union[bool, 'FindManyIssueArgsFromIssueRecursive2']


class SubjectIncludeFromIssueRecursive2(TypedDict, total=False):
    """Relational arguments for Issue"""
    Issue: Union[bool, 'FindManyIssueArgsFromIssueRecursive3']


class SubjectIncludeFromIssueRecursive3(TypedDict, total=False):
    """Relational arguments for Issue"""
    Issue: Union[bool, 'FindManyIssueArgsFromIssueRecursive4']


class SubjectIncludeFromIssueRecursive4(TypedDict, total=False):
    """Relational arguments for Issue"""

    

class SubjectArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'SubjectIncludeFromSubjectRecursive1'


class SubjectArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'SubjectIncludeFromSubjectRecursive2'


class SubjectArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'SubjectIncludeFromSubjectRecursive3'


class SubjectArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'SubjectIncludeFromSubjectRecursive4'


class SubjectArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    
    

class FindManySubjectArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive1'


class FindManySubjectArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive2'


class FindManySubjectArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive3'


class FindManySubjectArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    include: 'SubjectIncludeFromSubjectRecursive4'


class FindManySubjectArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['SubjectOrderByInput', List['SubjectOrderByInput']]
    where: 'SubjectWhereInput'
    cursor: 'SubjectWhereUniqueInput'
    distinct: List['SubjectScalarFieldKeys']
    
    

class GroupIncludeFromIssue(TypedDict, total=False):
    """Relational arguments for Issue"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromIssueRecursive1']


class GroupIncludeFromIssueRecursive1(TypedDict, total=False):
    """Relational arguments for Issue"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromIssueRecursive2']


class GroupIncludeFromIssueRecursive2(TypedDict, total=False):
    """Relational arguments for Issue"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromIssueRecursive3']


class GroupIncludeFromIssueRecursive3(TypedDict, total=False):
    """Relational arguments for Issue"""
    GroupUserRole: Union[bool, 'FindManyGroupUserRoleArgsFromIssueRecursive4']


class GroupIncludeFromIssueRecursive4(TypedDict, total=False):
    """Relational arguments for Issue"""

    

class GroupArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'GroupIncludeFromGroupRecursive1'


class GroupArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'GroupIncludeFromGroupRecursive2'


class GroupArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'GroupIncludeFromGroupRecursive3'


class GroupArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'GroupIncludeFromGroupRecursive4'


class GroupArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    
    

class FindManyGroupArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive1'


class FindManyGroupArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive2'


class FindManyGroupArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive3'


class FindManyGroupArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    include: 'GroupIncludeFromGroupRecursive4'


class FindManyGroupArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupOrderByInput', List['GroupOrderByInput']]
    where: 'GroupWhereInput'
    cursor: 'GroupWhereUniqueInput'
    distinct: List['GroupScalarFieldKeys']
    
    

class GroupUserRoleIncludeFromIssue(TypedDict, total=False):
    """Relational arguments for Issue"""
    group: Union[bool, 'GroupArgsFromIssueRecursive1']
    User: Union[bool, 'UserArgsFromIssueRecursive1']


class GroupUserRoleIncludeFromIssueRecursive1(TypedDict, total=False):
    """Relational arguments for Issue"""
    group: Union[bool, 'GroupArgsFromIssueRecursive2']
    User: Union[bool, 'UserArgsFromIssueRecursive2']


class GroupUserRoleIncludeFromIssueRecursive2(TypedDict, total=False):
    """Relational arguments for Issue"""
    group: Union[bool, 'GroupArgsFromIssueRecursive3']
    User: Union[bool, 'UserArgsFromIssueRecursive3']


class GroupUserRoleIncludeFromIssueRecursive3(TypedDict, total=False):
    """Relational arguments for Issue"""
    group: Union[bool, 'GroupArgsFromIssueRecursive4']
    User: Union[bool, 'UserArgsFromIssueRecursive4']


class GroupUserRoleIncludeFromIssueRecursive4(TypedDict, total=False):
    """Relational arguments for Issue"""

    

class GroupUserRoleArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class GroupUserRoleArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class GroupUserRoleArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class GroupUserRoleArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class GroupUserRoleArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    
    

class FindManyGroupUserRoleArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive1'


class FindManyGroupUserRoleArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive2'


class FindManyGroupUserRoleArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive3'


class FindManyGroupUserRoleArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    include: 'GroupUserRoleIncludeFromGroupUserRoleRecursive4'


class FindManyGroupUserRoleArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['GroupUserRoleOrderByInput', List['GroupUserRoleOrderByInput']]
    where: 'GroupUserRoleWhereInput'
    cursor: 'GroupUserRoleWhereUniqueInput'
    distinct: List['GroupUserRoleScalarFieldKeys']
    
    

class NoteIncludeFromIssue(TypedDict, total=False):
    """Relational arguments for Issue"""
    user: Union[bool, 'UserArgsFromIssueRecursive1']


class NoteIncludeFromIssueRecursive1(TypedDict, total=False):
    """Relational arguments for Issue"""
    user: Union[bool, 'UserArgsFromIssueRecursive2']


class NoteIncludeFromIssueRecursive2(TypedDict, total=False):
    """Relational arguments for Issue"""
    user: Union[bool, 'UserArgsFromIssueRecursive3']


class NoteIncludeFromIssueRecursive3(TypedDict, total=False):
    """Relational arguments for Issue"""
    user: Union[bool, 'UserArgsFromIssueRecursive4']


class NoteIncludeFromIssueRecursive4(TypedDict, total=False):
    """Relational arguments for Issue"""

    

class NoteArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'NoteIncludeFromNoteRecursive1'


class NoteArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'NoteIncludeFromNoteRecursive2'


class NoteArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'NoteIncludeFromNoteRecursive3'


class NoteArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'NoteIncludeFromNoteRecursive4'


class NoteArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    
    

class FindManyNoteArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive1'


class FindManyNoteArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive2'


class FindManyNoteArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive3'


class FindManyNoteArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    include: 'NoteIncludeFromNoteRecursive4'


class FindManyNoteArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['NoteOrderByInput', List['NoteOrderByInput']]
    where: 'NoteWhereInput'
    cursor: 'NoteWhereUniqueInput'
    distinct: List['NoteScalarFieldKeys']
    
    

class IssueIncludeFromIssue(TypedDict, total=False):
    """Relational arguments for Issue"""
    subject: Union[bool, 'SubjectArgsFromIssueRecursive1']


class IssueIncludeFromIssueRecursive1(TypedDict, total=False):
    """Relational arguments for Issue"""
    subject: Union[bool, 'SubjectArgsFromIssueRecursive2']


class IssueIncludeFromIssueRecursive2(TypedDict, total=False):
    """Relational arguments for Issue"""
    subject: Union[bool, 'SubjectArgsFromIssueRecursive3']


class IssueIncludeFromIssueRecursive3(TypedDict, total=False):
    """Relational arguments for Issue"""
    subject: Union[bool, 'SubjectArgsFromIssueRecursive4']


class IssueIncludeFromIssueRecursive4(TypedDict, total=False):
    """Relational arguments for Issue"""

    

class IssueArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'IssueIncludeFromIssueRecursive1'


class IssueArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'IssueIncludeFromIssueRecursive2'


class IssueArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'IssueIncludeFromIssueRecursive3'


class IssueArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    include: 'IssueIncludeFromIssueRecursive4'


class IssueArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    
    

class FindManyIssueArgsFromIssue(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive1'


class FindManyIssueArgsFromIssueRecursive1(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive2'


class FindManyIssueArgsFromIssueRecursive2(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive3'


class FindManyIssueArgsFromIssueRecursive3(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    include: 'IssueIncludeFromIssueRecursive4'


class FindManyIssueArgsFromIssueRecursive4(TypedDict, total=False):
    """Arguments for Issue"""
    take: int
    skip: int
    order_by: Union['IssueOrderByInput', List['IssueOrderByInput']]
    where: 'IssueWhereInput'
    cursor: 'IssueWhereUniqueInput'
    distinct: List['IssueScalarFieldKeys']
    


FindManyIssueArgs = FindManyIssueArgsFromIssue
FindFirstIssueArgs = FindManyIssueArgsFromIssue


    

class IssueWhereInput(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject_id: Union[_str, 'types.StringFilter']
    subject: 'SubjectRelationFilter'
    title: Union[None, _str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    priority: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['IssueWhereInputRecursive1', List['IssueWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['IssueWhereInputRecursive1']
    OR: List['IssueWhereInputRecursive1']
    NOT: List['IssueWhereInputRecursive1']


class IssueWhereInputRecursive1(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject_id: Union[_str, 'types.StringFilter']
    subject: 'SubjectRelationFilter'
    title: Union[None, _str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    priority: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['IssueWhereInputRecursive2', List['IssueWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['IssueWhereInputRecursive2']
    OR: List['IssueWhereInputRecursive2']
    NOT: List['IssueWhereInputRecursive2']


class IssueWhereInputRecursive2(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject_id: Union[_str, 'types.StringFilter']
    subject: 'SubjectRelationFilter'
    title: Union[None, _str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    priority: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['IssueWhereInputRecursive3', List['IssueWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['IssueWhereInputRecursive3']
    OR: List['IssueWhereInputRecursive3']
    NOT: List['IssueWhereInputRecursive3']


class IssueWhereInputRecursive3(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject_id: Union[_str, 'types.StringFilter']
    subject: 'SubjectRelationFilter'
    title: Union[None, _str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    priority: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['IssueWhereInputRecursive4', List['IssueWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['IssueWhereInputRecursive4']
    OR: List['IssueWhereInputRecursive4']
    NOT: List['IssueWhereInputRecursive4']


class IssueWhereInputRecursive4(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject_id: Union[_str, 'types.StringFilter']
    subject: 'SubjectRelationFilter'
    title: Union[None, _str, 'types.StringFilter']
    content: Union[None, _str, 'types.StringFilter']
    status: Union[None, _str, 'types.StringFilter']
    priority: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[None, datetime.datetime, 'types.DateTimeFilter']



# aggregate Issue types


    

class IssueScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject_id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['IssueScalarWhereWithAggregatesInputRecursive1']
    OR: List['IssueScalarWhereWithAggregatesInputRecursive1']
    NOT: List['IssueScalarWhereWithAggregatesInputRecursive1']


class IssueScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject_id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['IssueScalarWhereWithAggregatesInputRecursive2']
    OR: List['IssueScalarWhereWithAggregatesInputRecursive2']
    NOT: List['IssueScalarWhereWithAggregatesInputRecursive2']


class IssueScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject_id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['IssueScalarWhereWithAggregatesInputRecursive3']
    OR: List['IssueScalarWhereWithAggregatesInputRecursive3']
    NOT: List['IssueScalarWhereWithAggregatesInputRecursive3']


class IssueScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject_id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['IssueScalarWhereWithAggregatesInputRecursive4']
    OR: List['IssueScalarWhereWithAggregatesInputRecursive4']
    NOT: List['IssueScalarWhereWithAggregatesInputRecursive4']


class IssueScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Issue arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject_id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    priority: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class IssueGroupByOutput(TypedDict, total=False):
    id: _str
    subject_id: _str
    title: _str
    content: _str
    status: _str
    priority: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'IssueSumAggregateOutput'
    _avg: 'IssueAvgAggregateOutput'
    _min: 'IssueMinAggregateOutput'
    _max: 'IssueMaxAggregateOutput'
    _count: 'IssueCountAggregateOutput'


class IssueAvgAggregateOutput(TypedDict, total=False):
    """Issue output for aggregating averages"""


class IssueSumAggregateOutput(TypedDict, total=False):
    """Issue output for aggregating sums"""


class IssueScalarAggregateOutput(TypedDict, total=False):
    """Issue output including scalar fields"""
    id: _str
    subject_id: _str
    title: _str
    content: _str
    status: _str
    priority: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


IssueMinAggregateOutput = IssueScalarAggregateOutput
IssueMaxAggregateOutput = IssueScalarAggregateOutput


class IssueMaxAggregateInput(TypedDict, total=False):
    """Issue input for aggregating by max"""
    id: bool
    subject_id: bool
    title: bool
    content: bool
    status: bool
    priority: bool
    created_at: bool
    updated_at: bool


class IssueMinAggregateInput(TypedDict, total=False):
    """Issue input for aggregating by min"""
    id: bool
    subject_id: bool
    title: bool
    content: bool
    status: bool
    priority: bool
    created_at: bool
    updated_at: bool


class IssueNumberAggregateInput(TypedDict, total=False):
    """Issue input for aggregating numbers"""


IssueAvgAggregateInput = IssueNumberAggregateInput
IssueSumAggregateInput = IssueNumberAggregateInput


IssueCountAggregateInput = TypedDict(
    'IssueCountAggregateInput',
    {
        'id': bool,
        'subject_id': bool,
        'title': bool,
        'content': bool,
        'status': bool,
        'priority': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

IssueCountAggregateOutput = TypedDict(
    'IssueCountAggregateOutput',
    {
        'id': int,
        'subject_id': int,
        'title': int,
        'content': int,
        'status': int,
        'priority': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


IssueKeys = Literal[
    'id',
    'subject_id',
    'subject',
    'title',
    'content',
    'status',
    'priority',
    'created_at',
    'updated_at',
]
IssueScalarFieldKeys = Literal[
    'id',
    'subject_id',
    'title',
    'content',
    'status',
    'priority',
    'created_at',
    'updated_at',
]
IssueScalarFieldKeysT = TypeVar('IssueScalarFieldKeysT', bound=IssueScalarFieldKeys)

IssueRelationalFieldKeys = Literal[
        'subject',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields